
afterFirstSemExamination.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00001d08  00001d9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000042  00800092  00800092  00001dce  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001dce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fef  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000774  00000000  00000000  00004007  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001458  00000000  00000000  0000477b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000400  00000000  00000000  00005bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ae  00000000  00000000  00005fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001709  00000000  00000000  00006782  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00007e8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_1>
       8:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__vector_2>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <calculateAndDisplay+0x2c>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e8 e0       	ldi	r30, 0x08	; 8
      ea:	fd e1       	ldi	r31, 0x1D	; 29
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	a2 39       	cpi	r26, 0x92	; 146
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	a2 e9       	ldi	r26, 0x92	; 146
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a4 3d       	cpi	r26, 0xD4	; 212
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 6d 05 	call	0xada	; 0xada <main>
     10c:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <Keypad>:

char i2c_read(){
	TWCR  = (1<<TWEN) | (1<<TWINT);	//Enable I2C and clear interrupt
	while (!(TWCR & (1<<TWINT)));	//Read successful with all data received in TWDR
	return TWDR;
}
     114:	8f ee       	ldi	r24, 0xEF	; 239
     116:	82 bb       	out	0x12, r24	; 18
     118:	80 99       	sbic	0x10, 0	; 16
     11a:	08 c0       	rjmp	.+16     	; 0x12c <Keypad+0x18>
     11c:	8f e9       	ldi	r24, 0x9F	; 159
     11e:	9f e0       	ldi	r25, 0x0F	; 15
     120:	01 97       	sbiw	r24, 0x01	; 1
     122:	f1 f7       	brne	.-4      	; 0x120 <Keypad+0xc>
     124:	00 c0       	rjmp	.+0      	; 0x126 <Keypad+0x12>
     126:	00 00       	nop
     128:	87 e0       	ldi	r24, 0x07	; 7
     12a:	08 95       	ret
     12c:	81 99       	sbic	0x10, 1	; 16
     12e:	08 c0       	rjmp	.+16     	; 0x140 <Keypad+0x2c>
     130:	8f e9       	ldi	r24, 0x9F	; 159
     132:	9f e0       	ldi	r25, 0x0F	; 15
     134:	01 97       	sbiw	r24, 0x01	; 1
     136:	f1 f7       	brne	.-4      	; 0x134 <Keypad+0x20>
     138:	00 c0       	rjmp	.+0      	; 0x13a <Keypad+0x26>
     13a:	00 00       	nop
     13c:	88 e0       	ldi	r24, 0x08	; 8
     13e:	08 95       	ret
     140:	82 99       	sbic	0x10, 2	; 16
     142:	08 c0       	rjmp	.+16     	; 0x154 <Keypad+0x40>
     144:	8f e9       	ldi	r24, 0x9F	; 159
     146:	9f e0       	ldi	r25, 0x0F	; 15
     148:	01 97       	sbiw	r24, 0x01	; 1
     14a:	f1 f7       	brne	.-4      	; 0x148 <Keypad+0x34>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <Keypad+0x3a>
     14e:	00 00       	nop
     150:	89 e0       	ldi	r24, 0x09	; 9
     152:	08 95       	ret
     154:	83 99       	sbic	0x10, 3	; 16
     156:	08 c0       	rjmp	.+16     	; 0x168 <Keypad+0x54>
     158:	8f e9       	ldi	r24, 0x9F	; 159
     15a:	9f e0       	ldi	r25, 0x0F	; 15
     15c:	01 97       	sbiw	r24, 0x01	; 1
     15e:	f1 f7       	brne	.-4      	; 0x15c <Keypad+0x48>
     160:	00 c0       	rjmp	.+0      	; 0x162 <Keypad+0x4e>
     162:	00 00       	nop
     164:	8d e0       	ldi	r24, 0x0D	; 13
     166:	08 95       	ret
     168:	8f ed       	ldi	r24, 0xDF	; 223
     16a:	82 bb       	out	0x12, r24	; 18
     16c:	80 99       	sbic	0x10, 0	; 16
     16e:	08 c0       	rjmp	.+16     	; 0x180 <Keypad+0x6c>
     170:	8f e9       	ldi	r24, 0x9F	; 159
     172:	9f e0       	ldi	r25, 0x0F	; 15
     174:	01 97       	sbiw	r24, 0x01	; 1
     176:	f1 f7       	brne	.-4      	; 0x174 <Keypad+0x60>
     178:	00 c0       	rjmp	.+0      	; 0x17a <Keypad+0x66>
     17a:	00 00       	nop
     17c:	84 e0       	ldi	r24, 0x04	; 4
     17e:	08 95       	ret
     180:	81 99       	sbic	0x10, 1	; 16
     182:	08 c0       	rjmp	.+16     	; 0x194 <Keypad+0x80>
     184:	8f e9       	ldi	r24, 0x9F	; 159
     186:	9f e0       	ldi	r25, 0x0F	; 15
     188:	01 97       	sbiw	r24, 0x01	; 1
     18a:	f1 f7       	brne	.-4      	; 0x188 <Keypad+0x74>
     18c:	00 c0       	rjmp	.+0      	; 0x18e <Keypad+0x7a>
     18e:	00 00       	nop
     190:	85 e0       	ldi	r24, 0x05	; 5
     192:	08 95       	ret
     194:	82 99       	sbic	0x10, 2	; 16
     196:	08 c0       	rjmp	.+16     	; 0x1a8 <Keypad+0x94>
     198:	8f e9       	ldi	r24, 0x9F	; 159
     19a:	9f e0       	ldi	r25, 0x0F	; 15
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	f1 f7       	brne	.-4      	; 0x19c <Keypad+0x88>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <Keypad+0x8e>
     1a2:	00 00       	nop
     1a4:	86 e0       	ldi	r24, 0x06	; 6
     1a6:	08 95       	ret
     1a8:	83 99       	sbic	0x10, 3	; 16
     1aa:	08 c0       	rjmp	.+16     	; 0x1bc <Keypad+0xa8>
     1ac:	8f e9       	ldi	r24, 0x9F	; 159
     1ae:	9f e0       	ldi	r25, 0x0F	; 15
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <Keypad+0x9c>
     1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <Keypad+0xa2>
     1b6:	00 00       	nop
     1b8:	8e e0       	ldi	r24, 0x0E	; 14
     1ba:	08 95       	ret
     1bc:	8f eb       	ldi	r24, 0xBF	; 191
     1be:	82 bb       	out	0x12, r24	; 18
     1c0:	80 99       	sbic	0x10, 0	; 16
     1c2:	08 c0       	rjmp	.+16     	; 0x1d4 <Keypad+0xc0>
     1c4:	8f e9       	ldi	r24, 0x9F	; 159
     1c6:	9f e0       	ldi	r25, 0x0F	; 15
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <Keypad+0xb4>
     1cc:	00 c0       	rjmp	.+0      	; 0x1ce <Keypad+0xba>
     1ce:	00 00       	nop
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	08 95       	ret
     1d4:	81 99       	sbic	0x10, 1	; 16
     1d6:	08 c0       	rjmp	.+16     	; 0x1e8 <Keypad+0xd4>
     1d8:	8f e9       	ldi	r24, 0x9F	; 159
     1da:	9f e0       	ldi	r25, 0x0F	; 15
     1dc:	01 97       	sbiw	r24, 0x01	; 1
     1de:	f1 f7       	brne	.-4      	; 0x1dc <Keypad+0xc8>
     1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <Keypad+0xce>
     1e2:	00 00       	nop
     1e4:	82 e0       	ldi	r24, 0x02	; 2
     1e6:	08 95       	ret
     1e8:	82 99       	sbic	0x10, 2	; 16
     1ea:	08 c0       	rjmp	.+16     	; 0x1fc <Keypad+0xe8>
     1ec:	8f e9       	ldi	r24, 0x9F	; 159
     1ee:	9f e0       	ldi	r25, 0x0F	; 15
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <Keypad+0xdc>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <Keypad+0xe2>
     1f6:	00 00       	nop
     1f8:	83 e0       	ldi	r24, 0x03	; 3
     1fa:	08 95       	ret
     1fc:	83 99       	sbic	0x10, 3	; 16
     1fe:	08 c0       	rjmp	.+16     	; 0x210 <Keypad+0xfc>
     200:	8f e9       	ldi	r24, 0x9F	; 159
     202:	9f e0       	ldi	r25, 0x0F	; 15
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <Keypad+0xf0>
     208:	00 c0       	rjmp	.+0      	; 0x20a <Keypad+0xf6>
     20a:	00 00       	nop
     20c:	8f e0       	ldi	r24, 0x0F	; 15
     20e:	08 95       	ret
     210:	8f e7       	ldi	r24, 0x7F	; 127
     212:	82 bb       	out	0x12, r24	; 18
     214:	80 99       	sbic	0x10, 0	; 16
     216:	08 c0       	rjmp	.+16     	; 0x228 <Keypad+0x114>
     218:	8f e9       	ldi	r24, 0x9F	; 159
     21a:	9f e0       	ldi	r25, 0x0F	; 15
     21c:	01 97       	sbiw	r24, 0x01	; 1
     21e:	f1 f7       	brne	.-4      	; 0x21c <Keypad+0x108>
     220:	00 c0       	rjmp	.+0      	; 0x222 <Keypad+0x10e>
     222:	00 00       	nop
     224:	8a e0       	ldi	r24, 0x0A	; 10
     226:	08 95       	ret
     228:	81 99       	sbic	0x10, 1	; 16
     22a:	08 c0       	rjmp	.+16     	; 0x23c <Keypad+0x128>
     22c:	8f e9       	ldi	r24, 0x9F	; 159
     22e:	9f e0       	ldi	r25, 0x0F	; 15
     230:	01 97       	sbiw	r24, 0x01	; 1
     232:	f1 f7       	brne	.-4      	; 0x230 <Keypad+0x11c>
     234:	00 c0       	rjmp	.+0      	; 0x236 <Keypad+0x122>
     236:	00 00       	nop
     238:	8b e0       	ldi	r24, 0x0B	; 11
     23a:	08 95       	ret
     23c:	82 99       	sbic	0x10, 2	; 16
     23e:	08 c0       	rjmp	.+16     	; 0x250 <Keypad+0x13c>
     240:	8f e9       	ldi	r24, 0x9F	; 159
     242:	9f e0       	ldi	r25, 0x0F	; 15
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <Keypad+0x130>
     248:	00 c0       	rjmp	.+0      	; 0x24a <Keypad+0x136>
     24a:	00 00       	nop
     24c:	8c e0       	ldi	r24, 0x0C	; 12
     24e:	08 95       	ret
     250:	83 99       	sbic	0x10, 3	; 16
     252:	08 c0       	rjmp	.+16     	; 0x264 <Keypad+0x150>
     254:	8f e9       	ldi	r24, 0x9F	; 159
     256:	9f e0       	ldi	r25, 0x0F	; 15
     258:	01 97       	sbiw	r24, 0x01	; 1
     25a:	f1 f7       	brne	.-4      	; 0x258 <Keypad+0x144>
     25c:	00 c0       	rjmp	.+0      	; 0x25e <Keypad+0x14a>
     25e:	00 00       	nop
     260:	80 e1       	ldi	r24, 0x10	; 16
     262:	08 95       	ret
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	08 95       	ret

00000268 <delay>:
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	0a c0       	rjmp	.+20     	; 0x282 <delay+0x1a>
     26e:	2f 5f       	subi	r18, 0xFF	; 255
     270:	3f 4f       	sbci	r19, 0xFF	; 255
     272:	02 c0       	rjmp	.+4      	; 0x278 <delay+0x10>
     274:	20 e0       	ldi	r18, 0x00	; 0
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	29 37       	cpi	r18, 0x79	; 121
     27a:	31 05       	cpc	r19, r1
     27c:	c4 f3       	brlt	.-16     	; 0x26e <delay+0x6>
     27e:	4f 5f       	subi	r20, 0xFF	; 255
     280:	5f 4f       	sbci	r21, 0xFF	; 255
     282:	84 17       	cp	r24, r20
     284:	95 07       	cpc	r25, r21
     286:	b4 f7       	brge	.-20     	; 0x274 <delay+0xc>
     288:	08 95       	ret

0000028a <toggle>:
     28a:	83 b1       	in	r24, 0x03	; 3
     28c:	82 60       	ori	r24, 0x02	; 2
     28e:	83 b9       	out	0x03, r24	; 3
     290:	84 e8       	ldi	r24, 0x84	; 132
     292:	86 bf       	out	0x36, r24	; 54
     294:	06 b6       	in	r0, 0x36	; 54
     296:	07 fe       	sbrs	r0, 7
     298:	fd cf       	rjmp	.-6      	; 0x294 <toggle+0xa>
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 34 01 	call	0x268	; 0x268 <delay>
     2a2:	83 b1       	in	r24, 0x03	; 3
     2a4:	8d 7f       	andi	r24, 0xFD	; 253
     2a6:	83 b9       	out	0x03, r24	; 3
     2a8:	84 e8       	ldi	r24, 0x84	; 132
     2aa:	86 bf       	out	0x36, r24	; 54
     2ac:	06 b6       	in	r0, 0x36	; 54
     2ae:	07 fe       	sbrs	r0, 7
     2b0:	fd cf       	rjmp	.-6      	; 0x2ac <toggle+0x22>
     2b2:	08 95       	ret

000002b4 <lcd_cmd_hf>:
     2b4:	93 b1       	in	r25, 0x03	; 3
     2b6:	9e 7f       	andi	r25, 0xFE	; 254
     2b8:	93 b9       	out	0x03, r25	; 3
     2ba:	94 e8       	ldi	r25, 0x84	; 132
     2bc:	96 bf       	out	0x36, r25	; 54
     2be:	06 b6       	in	r0, 0x36	; 54
     2c0:	07 fe       	sbrs	r0, 7
     2c2:	fd cf       	rjmp	.-6      	; 0x2be <lcd_cmd_hf+0xa>
     2c4:	93 b1       	in	r25, 0x03	; 3
     2c6:	9f 70       	andi	r25, 0x0F	; 15
     2c8:	93 b9       	out	0x03, r25	; 3
     2ca:	94 e8       	ldi	r25, 0x84	; 132
     2cc:	96 bf       	out	0x36, r25	; 54
     2ce:	06 b6       	in	r0, 0x36	; 54
     2d0:	07 fe       	sbrs	r0, 7
     2d2:	fd cf       	rjmp	.-6      	; 0x2ce <lcd_cmd_hf+0x1a>
     2d4:	93 b1       	in	r25, 0x03	; 3
     2d6:	80 7f       	andi	r24, 0xF0	; 240
     2d8:	89 2b       	or	r24, r25
     2da:	83 b9       	out	0x03, r24	; 3
     2dc:	84 e8       	ldi	r24, 0x84	; 132
     2de:	86 bf       	out	0x36, r24	; 54
     2e0:	06 b6       	in	r0, 0x36	; 54
     2e2:	07 fe       	sbrs	r0, 7
     2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <lcd_cmd_hf+0x2c>
     2e6:	0e 94 45 01 	call	0x28a	; 0x28a <toggle>
     2ea:	08 95       	ret

000002ec <lcd_cmd>:
     2ec:	cf 93       	push	r28
     2ee:	c8 2f       	mov	r28, r24
     2f0:	83 b1       	in	r24, 0x03	; 3
     2f2:	8e 7f       	andi	r24, 0xFE	; 254
     2f4:	83 b9       	out	0x03, r24	; 3
     2f6:	84 e8       	ldi	r24, 0x84	; 132
     2f8:	86 bf       	out	0x36, r24	; 54
     2fa:	06 b6       	in	r0, 0x36	; 54
     2fc:	07 fe       	sbrs	r0, 7
     2fe:	fd cf       	rjmp	.-6      	; 0x2fa <lcd_cmd+0xe>
     300:	83 b1       	in	r24, 0x03	; 3
     302:	8f 70       	andi	r24, 0x0F	; 15
     304:	83 b9       	out	0x03, r24	; 3
     306:	84 e8       	ldi	r24, 0x84	; 132
     308:	86 bf       	out	0x36, r24	; 54
     30a:	06 b6       	in	r0, 0x36	; 54
     30c:	07 fe       	sbrs	r0, 7
     30e:	fd cf       	rjmp	.-6      	; 0x30a <lcd_cmd+0x1e>
     310:	83 b1       	in	r24, 0x03	; 3
     312:	9c 2f       	mov	r25, r28
     314:	90 7f       	andi	r25, 0xF0	; 240
     316:	89 2b       	or	r24, r25
     318:	83 b9       	out	0x03, r24	; 3
     31a:	84 e8       	ldi	r24, 0x84	; 132
     31c:	86 bf       	out	0x36, r24	; 54
     31e:	06 b6       	in	r0, 0x36	; 54
     320:	07 fe       	sbrs	r0, 7
     322:	fd cf       	rjmp	.-6      	; 0x31e <lcd_cmd+0x32>
     324:	0e 94 45 01 	call	0x28a	; 0x28a <toggle>
     328:	83 b1       	in	r24, 0x03	; 3
     32a:	8f 70       	andi	r24, 0x0F	; 15
     32c:	83 b9       	out	0x03, r24	; 3
     32e:	84 e8       	ldi	r24, 0x84	; 132
     330:	86 bf       	out	0x36, r24	; 54
     332:	06 b6       	in	r0, 0x36	; 54
     334:	07 fe       	sbrs	r0, 7
     336:	fd cf       	rjmp	.-6      	; 0x332 <lcd_cmd+0x46>
     338:	23 b1       	in	r18, 0x03	; 3
     33a:	30 e1       	ldi	r19, 0x10	; 16
     33c:	c3 9f       	mul	r28, r19
     33e:	c0 01       	movw	r24, r0
     340:	11 24       	eor	r1, r1
     342:	82 2b       	or	r24, r18
     344:	83 b9       	out	0x03, r24	; 3
     346:	84 e8       	ldi	r24, 0x84	; 132
     348:	86 bf       	out	0x36, r24	; 54
     34a:	06 b6       	in	r0, 0x36	; 54
     34c:	07 fe       	sbrs	r0, 7
     34e:	fd cf       	rjmp	.-6      	; 0x34a <lcd_cmd+0x5e>
     350:	0e 94 45 01 	call	0x28a	; 0x28a <toggle>
     354:	cf 91       	pop	r28
     356:	08 95       	ret

00000358 <lcd_init>:
     358:	80 e3       	ldi	r24, 0x30	; 48
     35a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_cmd_hf>
     35e:	80 e3       	ldi	r24, 0x30	; 48
     360:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_cmd_hf>
     364:	80 e2       	ldi	r24, 0x20	; 32
     366:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_cmd_hf>
     36a:	88 e2       	ldi	r24, 0x28	; 40
     36c:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd>
     370:	8c e0       	ldi	r24, 0x0C	; 12
     372:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd>
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd>
     37c:	86 e0       	ldi	r24, 0x06	; 6
     37e:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd>
     382:	80 e8       	ldi	r24, 0x80	; 128
     384:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd>
     388:	08 95       	ret

0000038a <lcd_dwr>:
     38a:	cf 93       	push	r28
     38c:	c8 2f       	mov	r28, r24
     38e:	83 b1       	in	r24, 0x03	; 3
     390:	81 60       	ori	r24, 0x01	; 1
     392:	83 b9       	out	0x03, r24	; 3
     394:	84 e8       	ldi	r24, 0x84	; 132
     396:	86 bf       	out	0x36, r24	; 54
     398:	06 b6       	in	r0, 0x36	; 54
     39a:	07 fe       	sbrs	r0, 7
     39c:	fd cf       	rjmp	.-6      	; 0x398 <lcd_dwr+0xe>
     39e:	83 b1       	in	r24, 0x03	; 3
     3a0:	8f 70       	andi	r24, 0x0F	; 15
     3a2:	83 b9       	out	0x03, r24	; 3
     3a4:	84 e8       	ldi	r24, 0x84	; 132
     3a6:	86 bf       	out	0x36, r24	; 54
     3a8:	06 b6       	in	r0, 0x36	; 54
     3aa:	07 fe       	sbrs	r0, 7
     3ac:	fd cf       	rjmp	.-6      	; 0x3a8 <lcd_dwr+0x1e>
     3ae:	83 b1       	in	r24, 0x03	; 3
     3b0:	9c 2f       	mov	r25, r28
     3b2:	90 7f       	andi	r25, 0xF0	; 240
     3b4:	89 2b       	or	r24, r25
     3b6:	83 b9       	out	0x03, r24	; 3
     3b8:	84 e8       	ldi	r24, 0x84	; 132
     3ba:	86 bf       	out	0x36, r24	; 54
     3bc:	06 b6       	in	r0, 0x36	; 54
     3be:	07 fe       	sbrs	r0, 7
     3c0:	fd cf       	rjmp	.-6      	; 0x3bc <lcd_dwr+0x32>
     3c2:	0e 94 45 01 	call	0x28a	; 0x28a <toggle>
     3c6:	83 b1       	in	r24, 0x03	; 3
     3c8:	8f 70       	andi	r24, 0x0F	; 15
     3ca:	83 b9       	out	0x03, r24	; 3
     3cc:	84 e8       	ldi	r24, 0x84	; 132
     3ce:	86 bf       	out	0x36, r24	; 54
     3d0:	06 b6       	in	r0, 0x36	; 54
     3d2:	07 fe       	sbrs	r0, 7
     3d4:	fd cf       	rjmp	.-6      	; 0x3d0 <lcd_dwr+0x46>
     3d6:	23 b1       	in	r18, 0x03	; 3
     3d8:	30 e1       	ldi	r19, 0x10	; 16
     3da:	c3 9f       	mul	r28, r19
     3dc:	c0 01       	movw	r24, r0
     3de:	11 24       	eor	r1, r1
     3e0:	82 2b       	or	r24, r18
     3e2:	83 b9       	out	0x03, r24	; 3
     3e4:	84 e8       	ldi	r24, 0x84	; 132
     3e6:	86 bf       	out	0x36, r24	; 54
     3e8:	06 b6       	in	r0, 0x36	; 54
     3ea:	07 fe       	sbrs	r0, 7
     3ec:	fd cf       	rjmp	.-6      	; 0x3e8 <lcd_dwr+0x5e>
     3ee:	0e 94 45 01 	call	0x28a	; 0x28a <toggle>
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <lcd_msg>:
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	ec 01       	movw	r28, r24
     3fc:	03 c0       	rjmp	.+6      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     3fe:	21 96       	adiw	r28, 0x01	; 1
     400:	0e 94 c5 01 	call	0x38a	; 0x38a <lcd_dwr>
     404:	88 81       	ld	r24, Y
     406:	81 11       	cpse	r24, r1
     408:	fa cf       	rjmp	.-12     	; 0x3fe <lcd_msg+0x8>
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <massagingMotorFunction>:
     410:	97 b3       	in	r25, 0x17	; 23
     412:	93 60       	ori	r25, 0x03	; 3
     414:	97 bb       	out	0x17, r25	; 23
     416:	9b b7       	in	r25, 0x3b	; 59
     418:	90 64       	ori	r25, 0x40	; 64
     41a:	9b bf       	out	0x3b, r25	; 59
     41c:	95 b7       	in	r25, 0x35	; 53
     41e:	92 60       	ori	r25, 0x02	; 2
     420:	95 bf       	out	0x35, r25	; 53
     422:	78 94       	sei
     424:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <counting>
     428:	90 fd       	sbrc	r25, 0
     42a:	1f c0       	rjmp	.+62     	; 0x46a <massagingMotorFunction+0x5a>
     42c:	98 b3       	in	r25, 0x18	; 24
     42e:	91 60       	ori	r25, 0x01	; 1
     430:	98 bb       	out	0x18, r25	; 24
     432:	ef e3       	ldi	r30, 0x3F	; 63
     434:	fc e9       	ldi	r31, 0x9C	; 156
     436:	31 97       	sbiw	r30, 0x01	; 1
     438:	f1 f7       	brne	.-4      	; 0x436 <massagingMotorFunction+0x26>
     43a:	00 c0       	rjmp	.+0      	; 0x43c <massagingMotorFunction+0x2c>
     43c:	00 00       	nop
     43e:	88 30       	cpi	r24, 0x08	; 8
     440:	51 f4       	brne	.+20     	; 0x456 <massagingMotorFunction+0x46>
     442:	88 b3       	in	r24, 0x18	; 24
     444:	82 60       	ori	r24, 0x02	; 2
     446:	88 bb       	out	0x18, r24	; 24
     448:	8f e3       	ldi	r24, 0x3F	; 63
     44a:	9c e9       	ldi	r25, 0x9C	; 156
     44c:	01 97       	sbiw	r24, 0x01	; 1
     44e:	f1 f7       	brne	.-4      	; 0x44c <massagingMotorFunction+0x3c>
     450:	00 c0       	rjmp	.+0      	; 0x452 <massagingMotorFunction+0x42>
     452:	00 00       	nop
     454:	0d c0       	rjmp	.+26     	; 0x470 <massagingMotorFunction+0x60>
     456:	88 b3       	in	r24, 0x18	; 24
     458:	8d 7f       	andi	r24, 0xFD	; 253
     45a:	88 bb       	out	0x18, r24	; 24
     45c:	ef e3       	ldi	r30, 0x3F	; 63
     45e:	fc e9       	ldi	r31, 0x9C	; 156
     460:	31 97       	sbiw	r30, 0x01	; 1
     462:	f1 f7       	brne	.-4      	; 0x460 <massagingMotorFunction+0x50>
     464:	00 c0       	rjmp	.+0      	; 0x466 <massagingMotorFunction+0x56>
     466:	00 00       	nop
     468:	03 c0       	rjmp	.+6      	; 0x470 <massagingMotorFunction+0x60>
     46a:	88 b3       	in	r24, 0x18	; 24
     46c:	8c 7f       	andi	r24, 0xFC	; 252
     46e:	88 bb       	out	0x18, r24	; 24
     470:	8f e9       	ldi	r24, 0x9F	; 159
     472:	9f e0       	ldi	r25, 0x0F	; 15
     474:	01 97       	sbiw	r24, 0x01	; 1
     476:	f1 f7       	brne	.-4      	; 0x474 <massagingMotorFunction+0x64>
     478:	00 c0       	rjmp	.+0      	; 0x47a <massagingMotorFunction+0x6a>
     47a:	00 00       	nop
     47c:	08 95       	ret

0000047e <terminatingMotorFunction>:
     47e:	87 b3       	in	r24, 0x17	; 23
     480:	83 60       	ori	r24, 0x03	; 3
     482:	87 bb       	out	0x17, r24	; 23
     484:	80 e4       	ldi	r24, 0x40	; 64
     486:	8b bf       	out	0x3b, r24	; 59
     488:	82 e0       	ldi	r24, 0x02	; 2
     48a:	85 bf       	out	0x35, r24	; 53
     48c:	78 94       	sei
     48e:	88 b3       	in	r24, 0x18	; 24
     490:	8c 7f       	andi	r24, 0xFC	; 252
     492:	88 bb       	out	0x18, r24	; 24
     494:	08 95       	ret

00000496 <__vector_1>:
     496:	1f 92       	push	r1
     498:	0f 92       	push	r0
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	0f 92       	push	r0
     49e:	11 24       	eor	r1, r1
     4a0:	8f 93       	push	r24
     4a2:	9f 93       	push	r25
     4a4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <counting>
     4a8:	8f 5f       	subi	r24, 0xFF	; 255
     4aa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <counting>
     4ae:	8f e9       	ldi	r24, 0x9F	; 159
     4b0:	9f e0       	ldi	r25, 0x0F	; 15
     4b2:	01 97       	sbiw	r24, 0x01	; 1
     4b4:	f1 f7       	brne	.-4      	; 0x4b2 <__vector_1+0x1c>
     4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <__vector_1+0x22>
     4b8:	00 00       	nop
     4ba:	9f 91       	pop	r25
     4bc:	8f 91       	pop	r24
     4be:	0f 90       	pop	r0
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	0f 90       	pop	r0
     4c4:	1f 90       	pop	r1
     4c6:	18 95       	reti

000004c8 <HCSR04Init>:
     4c8:	8a b3       	in	r24, 0x1a	; 26
     4ca:	81 60       	ori	r24, 0x01	; 1
     4cc:	8a bb       	out	0x1a, r24	; 26
     4ce:	08 95       	ret

000004d0 <HCSR04Trigger>:
     4d0:	8b b3       	in	r24, 0x1b	; 27
     4d2:	81 60       	ori	r24, 0x01	; 1
     4d4:	8b bb       	out	0x1b, r24	; 27
     4d6:	85 e3       	ldi	r24, 0x35	; 53
     4d8:	8a 95       	dec	r24
     4da:	f1 f7       	brne	.-4      	; 0x4d8 <HCSR04Trigger+0x8>
     4dc:	00 00       	nop
     4de:	8b b3       	in	r24, 0x1b	; 27
     4e0:	8e 7f       	andi	r24, 0xFE	; 254
     4e2:	8b bb       	out	0x1b, r24	; 27
     4e4:	08 95       	ret

000004e6 <GetPulseWidth>:
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	dc 01       	movw	r26, r24
     4ec:	05 c0       	rjmp	.+10     	; 0x4f8 <GetPulseWidth+0x12>
     4ee:	c9 99       	sbic	0x19, 1	; 25
     4f0:	0a c0       	rjmp	.+20     	; 0x506 <GetPulseWidth+0x20>
     4f2:	01 96       	adiw	r24, 0x01	; 1
     4f4:	a1 1d       	adc	r26, r1
     4f6:	b1 1d       	adc	r27, r1
     4f8:	80 3e       	cpi	r24, 0xE0	; 224
     4fa:	23 e9       	ldi	r18, 0x93	; 147
     4fc:	92 07       	cpc	r25, r18
     4fe:	24 e0       	ldi	r18, 0x04	; 4
     500:	a2 07       	cpc	r26, r18
     502:	b1 05       	cpc	r27, r1
     504:	a0 f3       	brcs	.-24     	; 0x4ee <GetPulseWidth+0x8>
     506:	80 3e       	cpi	r24, 0xE0	; 224
     508:	93 49       	sbci	r25, 0x93	; 147
     50a:	a4 40       	sbci	r26, 0x04	; 4
     50c:	b1 05       	cpc	r27, r1
     50e:	31 f1       	breq	.+76     	; 0x55c <GetPulseWidth+0x76>
     510:	1f bc       	out	0x2f, r1	; 47
     512:	82 e0       	ldi	r24, 0x02	; 2
     514:	8e bd       	out	0x2e, r24	; 46
     516:	1d bc       	out	0x2d, r1	; 45
     518:	1c bc       	out	0x2c, r1	; 44
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	dc 01       	movw	r26, r24
     520:	07 c0       	rjmp	.+14     	; 0x530 <GetPulseWidth+0x4a>
     522:	c9 9b       	sbis	0x19, 1	; 25
     524:	0c c0       	rjmp	.+24     	; 0x53e <GetPulseWidth+0x58>
     526:	2c b5       	in	r18, 0x2c	; 44
     528:	3d b5       	in	r19, 0x2d	; 45
     52a:	01 96       	adiw	r24, 0x01	; 1
     52c:	a1 1d       	adc	r26, r1
     52e:	b1 1d       	adc	r27, r1
     530:	80 3e       	cpi	r24, 0xE0	; 224
     532:	23 e9       	ldi	r18, 0x93	; 147
     534:	92 07       	cpc	r25, r18
     536:	24 e0       	ldi	r18, 0x04	; 4
     538:	a2 07       	cpc	r26, r18
     53a:	b1 05       	cpc	r27, r1
     53c:	90 f3       	brcs	.-28     	; 0x522 <GetPulseWidth+0x3c>
     53e:	80 3e       	cpi	r24, 0xE0	; 224
     540:	93 49       	sbci	r25, 0x93	; 147
     542:	a4 40       	sbci	r26, 0x04	; 4
     544:	b1 05       	cpc	r27, r1
     546:	69 f0       	breq	.+26     	; 0x562 <GetPulseWidth+0x7c>
     548:	8c b5       	in	r24, 0x2c	; 44
     54a:	9d b5       	in	r25, 0x2d	; 45
     54c:	a0 e0       	ldi	r26, 0x00	; 0
     54e:	b0 e0       	ldi	r27, 0x00	; 0
     550:	1e bc       	out	0x2e, r1	; 46
     552:	b6 95       	lsr	r27
     554:	a7 95       	ror	r26
     556:	97 95       	ror	r25
     558:	87 95       	ror	r24
     55a:	08 95       	ret
     55c:	8f ef       	ldi	r24, 0xFF	; 255
     55e:	9f ef       	ldi	r25, 0xFF	; 255
     560:	08 95       	ret
     562:	8e ef       	ldi	r24, 0xFE	; 254
     564:	9f ef       	ldi	r25, 0xFF	; 255
     566:	08 95       	ret

00000568 <i2c_init>:
     568:	82 e6       	ldi	r24, 0x62	; 98
     56a:	80 b9       	out	0x00, r24	; 0
     56c:	84 e0       	ldi	r24, 0x04	; 4
     56e:	86 bf       	out	0x36, r24	; 54
     570:	11 b8       	out	0x01, r1	; 1
     572:	08 95       	ret

00000574 <i2c_start>:
     574:	84 ea       	ldi	r24, 0xA4	; 164
     576:	86 bf       	out	0x36, r24	; 54
     578:	06 b6       	in	r0, 0x36	; 54
     57a:	07 fe       	sbrs	r0, 7
     57c:	fd cf       	rjmp	.-6      	; 0x578 <i2c_start+0x4>
     57e:	08 95       	ret

00000580 <i2c_write>:
     580:	83 b9       	out	0x03, r24	; 3
     582:	84 e8       	ldi	r24, 0x84	; 132
     584:	86 bf       	out	0x36, r24	; 54
     586:	06 b6       	in	r0, 0x36	; 54
     588:	07 fe       	sbrs	r0, 7
     58a:	fd cf       	rjmp	.-6      	; 0x586 <i2c_write+0x6>
     58c:	08 95       	ret

0000058e <display1>:
#define degree 0xdf
char temp1[10];

// display the values of 1st LM 35 sensor
void display1(unsigned char value)
{
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
		
		sprintf(temp1,"%d%cC  ", (int)value, degree);	//convert integer value to ASCII string
     592:	1f 92       	push	r1
     594:	9f ed       	ldi	r25, 0xDF	; 223
     596:	9f 93       	push	r25
     598:	1f 92       	push	r1
     59a:	8f 93       	push	r24
     59c:	82 e6       	ldi	r24, 0x62	; 98
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	9f 93       	push	r25
     5a2:	8f 93       	push	r24
     5a4:	cd e9       	ldi	r28, 0x9D	; 157
     5a6:	d0 e0       	ldi	r29, 0x00	; 0
     5a8:	df 93       	push	r29
     5aa:	cf 93       	push	r28
     5ac:	0e 94 98 0b 	call	0x1730	; 0x1730 <sprintf>
		lcd_cmd(0xC5);
     5b0:	85 ec       	ldi	r24, 0xC5	; 197
     5b2:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd>
		lcd_msg(temp1);									//send string data to display through lcd
     5b6:	ce 01       	movw	r24, r28
     5b8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <lcd_msg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5bc:	ef e3       	ldi	r30, 0x3F	; 63
     5be:	ff e1       	ldi	r31, 0x1F	; 31
     5c0:	31 97       	sbiw	r30, 0x01	; 1
     5c2:	f1 f7       	brne	.-4      	; 0x5c0 <display1+0x32>
     5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <display1+0x38>
     5c6:	00 00       	nop
		
		_delay_ms(2);
		memset(temp1,0,10);
     5c8:	8a e0       	ldi	r24, 0x0A	; 10
     5ca:	fe 01       	movw	r30, r28
     5cc:	11 92       	st	Z+, r1
     5ce:	8a 95       	dec	r24
     5d0:	e9 f7       	brne	.-6      	; 0x5cc <display1+0x3e>
		
	
	
}	
     5d2:	8d b7       	in	r24, 0x3d	; 61
     5d4:	9e b7       	in	r25, 0x3e	; 62
     5d6:	08 96       	adiw	r24, 0x08	; 8
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	9e bf       	out	0x3e, r25	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	8d bf       	out	0x3d, r24	; 61
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	08 95       	ret

000005e8 <getTemperature>:

//get the temperature of 1st LM 35 sensor
		

	char getTemperature(unsigned char enable){
		DDRA&=~(0x04);						//Make PINA2 zero for input purpose
     5e8:	9a b3       	in	r25, 0x1a	; 26
     5ea:	9b 7f       	andi	r25, 0xFB	; 251
     5ec:	9a bb       	out	0x1a, r25	; 26
		ADCSRA=0x87;						// make ADC enable and ck/128
     5ee:	97 e8       	ldi	r25, 0x87	; 135
     5f0:	96 b9       	out	0x06, r25	; 6
		ADMUX=0xE2;							// 2.56v Vref and ADC2 single ended data will be left justified
     5f2:	92 ee       	ldi	r25, 0xE2	; 226
     5f4:	97 b9       	out	0x07, r25	; 7
		

		ADCSRA |=(1<<ADSC);					//start the ADC conversion
     5f6:	96 b1       	in	r25, 0x06	; 6
     5f8:	90 64       	ori	r25, 0x40	; 64
     5fa:	96 b9       	out	0x06, r25	; 6
		while((ADCSRA&(1<<ADIF))==0);		//check the ADC conversion is finished
     5fc:	34 9b       	sbis	0x06, 4	; 6
     5fe:	fe cf       	rjmp	.-4      	; 0x5fc <getTemperature+0x14>
		data=ADCH;							//read the data from ADCH register
     600:	95 b1       	in	r25, 0x05	; 5
     602:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <data>
		if((enable==1 || enable==2)){
     606:	81 50       	subi	r24, 0x01	; 1
     608:	82 30       	cpi	r24, 0x02	; 2
     60a:	18 f4       	brcc	.+6      	; 0x612 <getTemperature+0x2a>
			display1(data);					//pass the temperature value to display in LCD
     60c:	89 2f       	mov	r24, r25
     60e:	0e 94 c7 02 	call	0x58e	; 0x58e <display1>
     612:	8f e9       	ldi	r24, 0x9F	; 159
     614:	9f e0       	ldi	r25, 0x0F	; 15
     616:	01 97       	sbiw	r24, 0x01	; 1
     618:	f1 f7       	brne	.-4      	; 0x616 <getTemperature+0x2e>
     61a:	00 c0       	rjmp	.+0      	; 0x61c <getTemperature+0x34>
     61c:	00 00       	nop
		}	
		
		_delay_ms(1);
		return data;
	
	}
     61e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <data>
     622:	08 95       	ret

00000624 <getTemperature2>:
//get the temperature of 2nd LM 35 sensor
	char getTemperature2(){
		DDRA&=~(0x08);						//Make PINA3 zero for input purpose
     624:	8a b3       	in	r24, 0x1a	; 26
     626:	87 7f       	andi	r24, 0xF7	; 247
     628:	8a bb       	out	0x1a, r24	; 26
		ADCSRA=0x87;						// make ADC enable and ck/128
     62a:	87 e8       	ldi	r24, 0x87	; 135
     62c:	86 b9       	out	0x06, r24	; 6
		ADMUX=0xE3;							// 2.56v Vref and ADC3 single ended data will be left justified
     62e:	83 ee       	ldi	r24, 0xE3	; 227
     630:	87 b9       	out	0x07, r24	; 7
		

		ADCSRA |=(1<<ADSC);					//start the ADC conversion
     632:	86 b1       	in	r24, 0x06	; 6
     634:	80 64       	ori	r24, 0x40	; 64
     636:	86 b9       	out	0x06, r24	; 6
		while((ADCSRA&(1<<ADIF))==0);		//check the ADC conversion is finished
     638:	34 9b       	sbis	0x06, 4	; 6
     63a:	fe cf       	rjmp	.-4      	; 0x638 <getTemperature2+0x14>
		data=ADCH;							//read the data from ADCH register
     63c:	85 b1       	in	r24, 0x05	; 5
     63e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <data>
     642:	8f e9       	ldi	r24, 0x9F	; 159
     644:	9f e0       	ldi	r25, 0x0F	; 15
     646:	01 97       	sbiw	r24, 0x01	; 1
     648:	f1 f7       	brne	.-4      	; 0x646 <getTemperature2+0x22>
     64a:	00 c0       	rjmp	.+0      	; 0x64c <getTemperature2+0x28>
     64c:	00 00       	nop
		
		_delay_ms(1);
		return data;
		
	}	
     64e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <data>
     652:	08 95       	ret

00000654 <cooling>:


//cool the system
void cooling(){
	
	PORTB|=0x10;
     654:	88 b3       	in	r24, 0x18	; 24
     656:	80 61       	ori	r24, 0x10	; 16
     658:	88 bb       	out	0x18, r24	; 24
	PORTA&=~(0x20);
     65a:	8b b3       	in	r24, 0x1b	; 27
     65c:	8f 7d       	andi	r24, 0xDF	; 223
     65e:	8b bb       	out	0x1b, r24	; 27
     660:	08 95       	ret

00000662 <heating>:
}

//heat the system
void heating(){

	PORTA|=0x20;
     662:	8b b3       	in	r24, 0x1b	; 27
     664:	80 62       	ori	r24, 0x20	; 32
     666:	8b bb       	out	0x1b, r24	; 27
	PORTB&=~(0x10);
     668:	88 b3       	in	r24, 0x18	; 24
     66a:	8f 7e       	andi	r24, 0xEF	; 239
     66c:	88 bb       	out	0x18, r24	; 24
     66e:	08 95       	ret

00000670 <offFunction>:
}
//off the cooling unit
void offFunction(){
	
	PORTB&=~(0x10);
     670:	88 b3       	in	r24, 0x18	; 24
     672:	8f 7e       	andi	r24, 0xEF	; 239
     674:	88 bb       	out	0x18, r24	; 24
	PORTA&=~(0x20);
     676:	8b b3       	in	r24, 0x1b	; 27
     678:	8f 7d       	andi	r24, 0xDF	; 223
     67a:	8b bb       	out	0x1b, r24	; 27
     67c:	08 95       	ret

0000067e <activateFans>:
}
//activate the fans
void activateFans(){
	PORTC|=0x40;
     67e:	85 b3       	in	r24, 0x15	; 21
     680:	80 64       	ori	r24, 0x40	; 64
     682:	85 bb       	out	0x15, r24	; 21
     684:	08 95       	ret

00000686 <deactivateFans>:
}
//deactivate the fans
void deactivateFans(){
	PORTC&=~(0x40);
     686:	85 b3       	in	r24, 0x15	; 21
     688:	8f 7b       	andi	r24, 0xBF	; 191
     68a:	85 bb       	out	0x15, r24	; 21
     68c:	08 95       	ret

0000068e <footMassager>:
#include <avr/interrupt.h>
#include <util/delay.h>
unsigned char i=64;

void footMassager(unsigned char m){
	OCR0=i;					// for 25% duty cycle in non inverted phase correct PWM
     68e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     692:	8c bf       	out	0x3c, r24	; 60
	TCCR0=0X61;				// Phase correct PWM, Non inverted 31.372 kHz,16Mhz crystal,so N=1
     694:	81 e6       	ldi	r24, 0x61	; 97
     696:	83 bf       	out	0x33, r24	; 51
	MCUCR |= (1<<ISC11);    //interrupt fire on falling edge in INT1
     698:	85 b7       	in	r24, 0x35	; 53
     69a:	88 60       	ori	r24, 0x08	; 8
     69c:	85 bf       	out	0x35, r24	; 53
	GICR  |= (1<<INT1);     //Enable the external interrupt source in general interrupt control register
     69e:	8b b7       	in	r24, 0x3b	; 59
     6a0:	80 68       	ori	r24, 0x80	; 128
     6a2:	8b bf       	out	0x3b, r24	; 59
	sei();					//enable global interrupts
     6a4:	78 94       	sei
	
{	
	if(PINC==(PINC|0x80)){
     6a6:	93 b3       	in	r25, 0x13	; 19
     6a8:	83 b3       	in	r24, 0x13	; 19
     6aa:	80 68       	ori	r24, 0x80	; 128
     6ac:	98 13       	cpse	r25, r24
     6ae:	03 c0       	rjmp	.+6      	; 0x6b6 <footMassager+0x28>
		PORTB|=0x20;
     6b0:	88 b3       	in	r24, 0x18	; 24
     6b2:	80 62       	ori	r24, 0x20	; 32
     6b4:	88 bb       	out	0x18, r24	; 24
		}
	OCR0=i;
     6b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     6ba:	8c bf       	out	0x3c, r24	; 60
     6bc:	08 95       	ret

000006be <eliminateFootMassager>:
}
}
void eliminateFootMassager(){
		PORTB&=~(0x20);
     6be:	88 b3       	in	r24, 0x18	; 24
     6c0:	8f 7d       	andi	r24, 0xDF	; 223
     6c2:	88 bb       	out	0x18, r24	; 24
		OCR0=0;
     6c4:	1c be       	out	0x3c, r1	; 60
     6c6:	08 95       	ret

000006c8 <footElevator>:
}
void footElevator(unsigned char m){
	//Rotate elevating motor to clockwise direction
	{	
	if(m==5){
     6c8:	85 30       	cpi	r24, 0x05	; 5
     6ca:	21 f4       	brne	.+8      	; 0x6d4 <footElevator+0xc>
		PORTB|=0x80;
     6cc:	98 b3       	in	r25, 0x18	; 24
     6ce:	90 68       	ori	r25, 0x80	; 128
     6d0:	98 bb       	out	0x18, r25	; 24
     6d2:	03 c0       	rjmp	.+6      	; 0x6da <footElevator+0x12>
		}else{
		PORTB&=~(0x80);
     6d4:	98 b3       	in	r25, 0x18	; 24
     6d6:	9f 77       	andi	r25, 0x7F	; 127
     6d8:	98 bb       	out	0x18, r25	; 24
	}
}

//Rotate elevating motor to counter-clockwise direction
	{
	if(m==2){
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	21 f4       	brne	.+8      	; 0x6e6 <footElevator+0x1e>
			PORTB|=0x40;
     6de:	88 b3       	in	r24, 0x18	; 24
     6e0:	80 64       	ori	r24, 0x40	; 64
     6e2:	88 bb       	out	0x18, r24	; 24
     6e4:	08 95       	ret
		}else{
			PORTB&=~(0x40);
     6e6:	88 b3       	in	r24, 0x18	; 24
     6e8:	8f 7b       	andi	r24, 0xBF	; 191
     6ea:	88 bb       	out	0x18, r24	; 24
     6ec:	08 95       	ret

000006ee <__vector_2>:
		}
	}
		
}

ISR(INT1_vect){
     6ee:	1f 92       	push	r1
     6f0:	0f 92       	push	r0
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	0f 92       	push	r0
     6f6:	11 24       	eor	r1, r1
     6f8:	8f 93       	push	r24
	if(i<=240){
     6fa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     6fe:	81 3f       	cpi	r24, 0xF1	; 241
     700:	20 f4       	brcc	.+8      	; 0x70a <__vector_2+0x1c>
		i=i+60;
     702:	84 5c       	subi	r24, 0xC4	; 196
     704:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     708:	03 c0       	rjmp	.+6      	; 0x710 <__vector_2+0x22>
	}else{
		i=64;
     70a:	80 e4       	ldi	r24, 0x40	; 64
     70c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     710:	85 e3       	ldi	r24, 0x35	; 53
     712:	8a 95       	dec	r24
     714:	f1 f7       	brne	.-4      	; 0x712 <__vector_2+0x24>
     716:	00 00       	nop
	}
		
	_delay_us(10);
}
     718:	8f 91       	pop	r24
     71a:	0f 90       	pop	r0
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	0f 90       	pop	r0
     720:	1f 90       	pop	r1
     722:	18 95       	reti

00000724 <lumbersupportForward1>:
#include <util/delay.h>

// to move lumbersupport forward by 45 degree (45*8)=360 degree
int lumbersupportForward1(void)
{	
	PORTC|=0x24;
     724:	85 b3       	in	r24, 0x15	; 21
     726:	84 62       	ori	r24, 0x24	; 36
     728:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     72a:	8f e3       	ldi	r24, 0x3F	; 63
     72c:	9c e9       	ldi	r25, 0x9C	; 156
     72e:	01 97       	sbiw	r24, 0x01	; 1
     730:	f1 f7       	brne	.-4      	; 0x72e <lumbersupportForward1+0xa>
     732:	00 c0       	rjmp	.+0      	; 0x734 <lumbersupportForward1+0x10>
     734:	00 00       	nop
	_delay_ms(10);
	
	return 0;
}
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	08 95       	ret

0000073c <lumbersupportForward2>:
int lumbersupportForward2(void)
{
	
	PORTC&=~(0x04);
     73c:	85 b3       	in	r24, 0x15	; 21
     73e:	8b 7f       	andi	r24, 0xFB	; 251
     740:	85 bb       	out	0x15, r24	; 21
     742:	8f e3       	ldi	r24, 0x3F	; 63
     744:	9c e9       	ldi	r25, 0x9C	; 156
     746:	01 97       	sbiw	r24, 0x01	; 1
     748:	f1 f7       	brne	.-4      	; 0x746 <lumbersupportForward2+0xa>
     74a:	00 c0       	rjmp	.+0      	; 0x74c <lumbersupportForward2+0x10>
     74c:	00 00       	nop
	_delay_ms(10);
	
	return 0;
	
}
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	08 95       	ret

00000754 <lumbersupportForward3>:
int lumbersupportForward3(void)
{		
	
	PORTC|=0x28;
     754:	85 b3       	in	r24, 0x15	; 21
     756:	88 62       	ori	r24, 0x28	; 40
     758:	85 bb       	out	0x15, r24	; 21
     75a:	8f e3       	ldi	r24, 0x3F	; 63
     75c:	9c e9       	ldi	r25, 0x9C	; 156
     75e:	01 97       	sbiw	r24, 0x01	; 1
     760:	f1 f7       	brne	.-4      	; 0x75e <lumbersupportForward3+0xa>
     762:	00 c0       	rjmp	.+0      	; 0x764 <lumbersupportForward3+0x10>
     764:	00 00       	nop
	_delay_ms(10);
	
	return 0;
}
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	08 95       	ret

0000076c <lumbersupportForward4>:
int lumbersupportForward4(void)
{		
	
	PORTC&=~(0x20);
     76c:	85 b3       	in	r24, 0x15	; 21
     76e:	8f 7d       	andi	r24, 0xDF	; 223
     770:	85 bb       	out	0x15, r24	; 21
     772:	8f e3       	ldi	r24, 0x3F	; 63
     774:	9c e9       	ldi	r25, 0x9C	; 156
     776:	01 97       	sbiw	r24, 0x01	; 1
     778:	f1 f7       	brne	.-4      	; 0x776 <lumbersupportForward4+0xa>
     77a:	00 c0       	rjmp	.+0      	; 0x77c <lumbersupportForward4+0x10>
     77c:	00 00       	nop
	_delay_ms(10);
	
	return 0;	
}
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	08 95       	ret

00000784 <lumbersupportForward5>:
int lumbersupportForward5(void)
{	
	
	PORTC |=0x18;
     784:	85 b3       	in	r24, 0x15	; 21
     786:	88 61       	ori	r24, 0x18	; 24
     788:	85 bb       	out	0x15, r24	; 21
     78a:	8f e3       	ldi	r24, 0x3F	; 63
     78c:	9c e9       	ldi	r25, 0x9C	; 156
     78e:	01 97       	sbiw	r24, 0x01	; 1
     790:	f1 f7       	brne	.-4      	; 0x78e <lumbersupportForward5+0xa>
     792:	00 c0       	rjmp	.+0      	; 0x794 <lumbersupportForward5+0x10>
     794:	00 00       	nop
	_delay_ms(10);
	
	return 0;
}
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	08 95       	ret

0000079c <lumbersupportForward6>:
int lumbersupportForward6(void)
{		
	
	PORTC &=~(0x08);
     79c:	85 b3       	in	r24, 0x15	; 21
     79e:	87 7f       	andi	r24, 0xF7	; 247
     7a0:	85 bb       	out	0x15, r24	; 21
     7a2:	8f e3       	ldi	r24, 0x3F	; 63
     7a4:	9c e9       	ldi	r25, 0x9C	; 156
     7a6:	01 97       	sbiw	r24, 0x01	; 1
     7a8:	f1 f7       	brne	.-4      	; 0x7a6 <lumbersupportForward6+0xa>
     7aa:	00 c0       	rjmp	.+0      	; 0x7ac <lumbersupportForward6+0x10>
     7ac:	00 00       	nop
	_delay_ms(10);
	
	return 0;	
}
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	08 95       	ret

000007b4 <lumbersupportForward7>:
int lumbersupportForward7(void)
{		
	
	PORTC |= 0x14;
     7b4:	85 b3       	in	r24, 0x15	; 21
     7b6:	84 61       	ori	r24, 0x14	; 20
     7b8:	85 bb       	out	0x15, r24	; 21
     7ba:	8f e3       	ldi	r24, 0x3F	; 63
     7bc:	9c e9       	ldi	r25, 0x9C	; 156
     7be:	01 97       	sbiw	r24, 0x01	; 1
     7c0:	f1 f7       	brne	.-4      	; 0x7be <lumbersupportForward7+0xa>
     7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <lumbersupportForward7+0x10>
     7c4:	00 00       	nop
	_delay_ms(10);
	
	return 0;
}
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	08 95       	ret

000007cc <lumbersupportForward8>:
int lumbersupportForward8(void)
{		
	
	PORTC &=~(0x10);
     7cc:	85 b3       	in	r24, 0x15	; 21
     7ce:	8f 7e       	andi	r24, 0xEF	; 239
     7d0:	85 bb       	out	0x15, r24	; 21
     7d2:	8f e3       	ldi	r24, 0x3F	; 63
     7d4:	9c e9       	ldi	r25, 0x9C	; 156
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	f1 f7       	brne	.-4      	; 0x7d6 <lumbersupportForward8+0xa>
     7da:	00 c0       	rjmp	.+0      	; 0x7dc <lumbersupportForward8+0x10>
     7dc:	00 00       	nop
	_delay_ms(10);
	
	return 0;	
}
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	08 95       	ret

000007e4 <lumbersupportBackward1>:

// to move lumbersupport backward by 45 degree (45*8)=360 degree
int lumbersupportBackward1(void)
{		
	
	PORTC |= 0x14;
     7e4:	85 b3       	in	r24, 0x15	; 21
     7e6:	84 61       	ori	r24, 0x14	; 20
     7e8:	85 bb       	out	0x15, r24	; 21
     7ea:	8f e3       	ldi	r24, 0x3F	; 63
     7ec:	9c e9       	ldi	r25, 0x9C	; 156
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <lumbersupportBackward1+0xa>
     7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <lumbersupportBackward1+0x10>
     7f4:	00 00       	nop
	_delay_ms(10);
	
	return 0;
}
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	08 95       	ret

000007fc <lumbersupportBackward2>:
int lumbersupportBackward2(void)
{	
	
	PORTC &= ~(0x04);
     7fc:	85 b3       	in	r24, 0x15	; 21
     7fe:	8b 7f       	andi	r24, 0xFB	; 251
     800:	85 bb       	out	0x15, r24	; 21
     802:	8f e3       	ldi	r24, 0x3F	; 63
     804:	9c e9       	ldi	r25, 0x9C	; 156
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	f1 f7       	brne	.-4      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     80c:	00 00       	nop
	_delay_ms(10);
	
	return 0;
}
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	08 95       	ret

00000814 <lumbersupportBackward3>:
int lumbersupportBackward3(void)
{		
	
	PORTC |= 0x18;
     814:	85 b3       	in	r24, 0x15	; 21
     816:	88 61       	ori	r24, 0x18	; 24
     818:	85 bb       	out	0x15, r24	; 21
     81a:	8f e3       	ldi	r24, 0x3F	; 63
     81c:	9c e9       	ldi	r25, 0x9C	; 156
     81e:	01 97       	sbiw	r24, 0x01	; 1
     820:	f1 f7       	brne	.-4      	; 0x81e <lumbersupportBackward3+0xa>
     822:	00 c0       	rjmp	.+0      	; 0x824 <lumbersupportBackward3+0x10>
     824:	00 00       	nop
	_delay_ms(10);
	
	return 0;
}
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	08 95       	ret

0000082c <lumbersupportBackward4>:
int lumbersupportBackward4(void)
{	
	
	PORTC &=~(0x10);
     82c:	85 b3       	in	r24, 0x15	; 21
     82e:	8f 7e       	andi	r24, 0xEF	; 239
     830:	85 bb       	out	0x15, r24	; 21
     832:	8f e3       	ldi	r24, 0x3F	; 63
     834:	9c e9       	ldi	r25, 0x9C	; 156
     836:	01 97       	sbiw	r24, 0x01	; 1
     838:	f1 f7       	brne	.-4      	; 0x836 <lumbersupportBackward4+0xa>
     83a:	00 c0       	rjmp	.+0      	; 0x83c <lumbersupportBackward4+0x10>
     83c:	00 00       	nop
	_delay_ms(10);
	
	return 0;
}
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	08 95       	ret

00000844 <lumbersupportBackward5>:
int lumbersupportBackward5(void)
{		
	
	PORTC |= 0x28;
     844:	85 b3       	in	r24, 0x15	; 21
     846:	88 62       	ori	r24, 0x28	; 40
     848:	85 bb       	out	0x15, r24	; 21
     84a:	8f e3       	ldi	r24, 0x3F	; 63
     84c:	9c e9       	ldi	r25, 0x9C	; 156
     84e:	01 97       	sbiw	r24, 0x01	; 1
     850:	f1 f7       	brne	.-4      	; 0x84e <lumbersupportBackward5+0xa>
     852:	00 c0       	rjmp	.+0      	; 0x854 <lumbersupportBackward5+0x10>
     854:	00 00       	nop
	_delay_ms(10);
	
	return 0;
}
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	08 95       	ret

0000085c <lumbersupportBackward6>:
int lumbersupportBackward6(void)
{		
	
	PORTC &=~(0x08);
     85c:	85 b3       	in	r24, 0x15	; 21
     85e:	87 7f       	andi	r24, 0xF7	; 247
     860:	85 bb       	out	0x15, r24	; 21
     862:	8f e3       	ldi	r24, 0x3F	; 63
     864:	9c e9       	ldi	r25, 0x9C	; 156
     866:	01 97       	sbiw	r24, 0x01	; 1
     868:	f1 f7       	brne	.-4      	; 0x866 <__stack+0x7>
     86a:	00 c0       	rjmp	.+0      	; 0x86c <__stack+0xd>
     86c:	00 00       	nop
	_delay_ms(10);
	
	return 0;

}
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	08 95       	ret

00000874 <lumbersupportBackward7>:
int lumbersupportBackward7(void)
{		
	
	PORTC |= 0x24;
     874:	85 b3       	in	r24, 0x15	; 21
     876:	84 62       	ori	r24, 0x24	; 36
     878:	85 bb       	out	0x15, r24	; 21
     87a:	8f e3       	ldi	r24, 0x3F	; 63
     87c:	9c e9       	ldi	r25, 0x9C	; 156
     87e:	01 97       	sbiw	r24, 0x01	; 1
     880:	f1 f7       	brne	.-4      	; 0x87e <lumbersupportBackward7+0xa>
     882:	00 c0       	rjmp	.+0      	; 0x884 <lumbersupportBackward7+0x10>
     884:	00 00       	nop
	_delay_ms(10);
	
	return 0;

}
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	08 95       	ret

0000088c <lumbersupportBackward8>:
int lumbersupportBackward8(void)
{		
	
	PORTC &=~(0x20);
     88c:	85 b3       	in	r24, 0x15	; 21
     88e:	8f 7d       	andi	r24, 0xDF	; 223
     890:	85 bb       	out	0x15, r24	; 21
     892:	8f e3       	ldi	r24, 0x3F	; 63
     894:	9c e9       	ldi	r25, 0x9C	; 156
     896:	01 97       	sbiw	r24, 0x01	; 1
     898:	f1 f7       	brne	.-4      	; 0x896 <lumbersupportBackward8+0xa>
     89a:	00 c0       	rjmp	.+0      	; 0x89c <lumbersupportBackward8+0x10>
     89c:	00 00       	nop
	_delay_ms(10);
	
	return 0;

     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	08 95       	ret

000008a4 <calculateAndDisplay>:
#define F_CPU 16000000UL
#include <util/delay.h>
char battery[10];

void calculateAndDisplay(unsigned char value)
{
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
	float gotVoltage,realVoltage,percentage;
	gotVoltage=value/100.0;
     8a8:	68 2f       	mov	r22, r24
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	0e 94 b3 08 	call	0x1166	; 0x1166 <__floatsisf>
     8b4:	20 e0       	ldi	r18, 0x00	; 0
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	48 ec       	ldi	r20, 0xC8	; 200
     8ba:	52 e4       	ldi	r21, 0x42	; 66
     8bc:	0e 94 09 08 	call	0x1012	; 0x1012 <__divsf3>
	realVoltage=gotVoltage*8.0;
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	51 e4       	ldi	r21, 0x41	; 65
     8c8:	0e 94 3f 09 	call	0x127e	; 0x127e <__mulsf3>
	percentage=((realVoltage-12.0)/2.8*100);
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 e4       	ldi	r20, 0x40	; 64
     8d2:	51 e4       	ldi	r21, 0x41	; 65
     8d4:	0e 94 9c 07 	call	0xf38	; 0xf38 <__subsf3>
     8d8:	23 e3       	ldi	r18, 0x33	; 51
     8da:	33 e3       	ldi	r19, 0x33	; 51
     8dc:	43 e3       	ldi	r20, 0x33	; 51
     8de:	50 e4       	ldi	r21, 0x40	; 64
     8e0:	0e 94 09 08 	call	0x1012	; 0x1012 <__divsf3>
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	48 ec       	ldi	r20, 0xC8	; 200
     8ea:	52 e4       	ldi	r21, 0x42	; 66
     8ec:	0e 94 3f 09 	call	0x127e	; 0x127e <__mulsf3>
	sprintf(battery,"%d", (int)percentage);		//convert integer value to ASCII string
     8f0:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__fixsfsi>
     8f4:	7f 93       	push	r23
     8f6:	6f 93       	push	r22
     8f8:	8a e6       	ldi	r24, 0x6A	; 106
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	9f 93       	push	r25
     8fe:	8f 93       	push	r24
     900:	c8 ec       	ldi	r28, 0xC8	; 200
     902:	d0 e0       	ldi	r29, 0x00	; 0
     904:	df 93       	push	r29
     906:	cf 93       	push	r28
     908:	0e 94 98 0b 	call	0x1730	; 0x1730 <sprintf>
	lcd_msg(battery);							//send string data to display through lcd
     90c:	ce 01       	movw	r24, r28
     90e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <lcd_msg>
     912:	ef e3       	ldi	r30, 0x3F	; 63
     914:	ff e1       	ldi	r31, 0x1F	; 31
     916:	31 97       	sbiw	r30, 0x01	; 1
     918:	f1 f7       	brne	.-4      	; 0x916 <calculateAndDisplay+0x72>
     91a:	00 c0       	rjmp	.+0      	; 0x91c <calculateAndDisplay+0x78>
     91c:	00 00       	nop
	_delay_ms(2);
	memset(battery,0,10);
     91e:	8a e0       	ldi	r24, 0x0A	; 10
     920:	fe 01       	movw	r30, r28
     922:	11 92       	st	Z+, r1
     924:	8a 95       	dec	r24
     926:	e9 f7       	brne	.-6      	; 0x922 <calculateAndDisplay+0x7e>
	
		
}
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	08 95       	ret

0000093a <getVoltage>:

char getVoltage(){
	
	ADCSRA=0x87;					// make ADC enable and ck/128
     93a:	87 e8       	ldi	r24, 0x87	; 135
     93c:	86 b9       	out	0x06, r24	; 6
	ADMUX=0xE4;						// 2.56v Vref and ADC4 single ended data will be left justified
     93e:	84 ee       	ldi	r24, 0xE4	; 228
     940:	87 b9       	out	0x07, r24	; 7
		

	ADCSRA |=(1<<ADSC);				//start the ADC conversion
     942:	86 b1       	in	r24, 0x06	; 6
     944:	80 64       	ori	r24, 0x40	; 64
     946:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA&(1<<ADIF))==0);	//check the ADC conversion is finished
     948:	34 9b       	sbis	0x06, 4	; 6
     94a:	fe cf       	rjmp	.-4      	; 0x948 <getVoltage+0xe>
	data=ADCH;						//read the data from ADCH register
     94c:	85 b1       	in	r24, 0x05	; 5
     94e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <data>
		
	calculateAndDisplay(data);
     952:	0e 94 52 04 	call	0x8a4	; 0x8a4 <calculateAndDisplay>
     956:	8f e9       	ldi	r24, 0x9F	; 159
     958:	9f e0       	ldi	r25, 0x0F	; 15
     95a:	01 97       	sbiw	r24, 0x01	; 1
     95c:	f1 f7       	brne	.-4      	; 0x95a <getVoltage+0x20>
     95e:	00 c0       	rjmp	.+0      	; 0x960 <getVoltage+0x26>
     960:	00 00       	nop
		
	_delay_ms(1);
	
	return 0;
		
	}
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	08 95       	ret

00000966 <calculation>:
	digitAmount=calculation();		
	
	
}

char calculation(){					
     966:	8f 92       	push	r8
     968:	9f 92       	push	r9
     96a:	af 92       	push	r10
     96c:	bf 92       	push	r11
     96e:	cf 92       	push	r12
     970:	df 92       	push	r13
     972:	ef 92       	push	r14
     974:	ff 92       	push	r15
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
	int32_t summation=0;								//Set initial value to 0
	for(int j=23;j>=0;j--){								//Proceed to evaluate values from 24th location of the  array.
     97a:	c7 e1       	ldi	r28, 0x17	; 23
     97c:	d0 e0       	ldi	r29, 0x00	; 0
	
	
}

char calculation(){					
	int32_t summation=0;								//Set initial value to 0
     97e:	c1 2c       	mov	r12, r1
     980:	d1 2c       	mov	r13, r1
     982:	76 01       	movw	r14, r12
	for(int j=23;j>=0;j--){								//Proceed to evaluate values from 24th location of the  array.
     984:	27 c0       	rjmp	.+78     	; 0x9d4 <calculation+0x6e>
		
		if(valueString[j]=='0'){						//If the retrieved bit is 0,consider it as 1.Because the output of 24 bits of data is in 2's complement format.
     986:	fe 01       	movw	r30, r28
     988:	e9 55       	subi	r30, 0x59	; 89
     98a:	ff 4f       	sbci	r31, 0xFF	; 255
     98c:	80 81       	ld	r24, Z
     98e:	80 33       	cpi	r24, 0x30	; 48
     990:	01 f5       	brne	.+64     	; 0x9d2 <calculation+0x6c>
			summation=summation + pow(2,(23-j))*1;		//Binary to decimal conversion 
     992:	67 e1       	ldi	r22, 0x17	; 23
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	6c 1b       	sub	r22, r28
     998:	7d 0b       	sbc	r23, r29
     99a:	07 2e       	mov	r0, r23
     99c:	00 0c       	add	r0, r0
     99e:	88 0b       	sbc	r24, r24
     9a0:	99 0b       	sbc	r25, r25
     9a2:	0e 94 b3 08 	call	0x1166	; 0x1166 <__floatsisf>
     9a6:	9b 01       	movw	r18, r22
     9a8:	ac 01       	movw	r20, r24
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	90 e4       	ldi	r25, 0x40	; 64
     9b2:	0e 94 ac 09 	call	0x1358	; 0x1358 <pow>
     9b6:	4b 01       	movw	r8, r22
     9b8:	5c 01       	movw	r10, r24
     9ba:	c7 01       	movw	r24, r14
     9bc:	b6 01       	movw	r22, r12
     9be:	0e 94 b3 08 	call	0x1166	; 0x1166 <__floatsisf>
     9c2:	a5 01       	movw	r20, r10
     9c4:	94 01       	movw	r18, r8
     9c6:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__addsf3>
     9ca:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__fixsfsi>
     9ce:	6b 01       	movw	r12, r22
     9d0:	7c 01       	movw	r14, r24
	
}

char calculation(){					
	int32_t summation=0;								//Set initial value to 0
	for(int j=23;j>=0;j--){								//Proceed to evaluate values from 24th location of the  array.
     9d2:	21 97       	sbiw	r28, 0x01	; 1
     9d4:	dd 23       	and	r29, r29
     9d6:	bc f6       	brge	.-82     	; 0x986 <calculation+0x20>
			summation=summation + pow(2,(23-j))*1;		//Binary to decimal conversion 
		}
		
	}
	
	double decimalOutput=summation+1.0;                //Add 1 to summation after taking the complement 
     9d8:	c7 01       	movw	r24, r14
     9da:	b6 01       	movw	r22, r12
     9dc:	0e 94 b3 08 	call	0x1166	; 0x1166 <__floatsisf>
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	40 e8       	ldi	r20, 0x80	; 128
     9e6:	5f e3       	ldi	r21, 0x3F	; 63
     9e8:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__addsf3>
	double finalValue=calibrationFactor*decimalOutput; //calibration factor(0.00002773232),This value should be calculated.
     9ec:	24 eb       	ldi	r18, 0xB4	; 180
     9ee:	32 ea       	ldi	r19, 0xA2	; 162
     9f0:	48 ee       	ldi	r20, 0xE8	; 232
     9f2:	57 e3       	ldi	r21, 0x37	; 55
     9f4:	0e 94 3f 09 	call	0x127e	; 0x127e <__mulsf3>
	loadCondition=round(finalValue);				   //round decimal values to integers
     9f8:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <round>
     9fc:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__fixsfsi>
     a00:	ab 01       	movw	r20, r22
     a02:	70 93 c0 00 	sts	0x00C0, r23	; 0x8000c0 <loadCondition+0x1>
     a06:	60 93 bf 00 	sts	0x00BF, r22	; 0x8000bf <loadCondition>
	int roundFinalValue=round(finalValue);
	
	int count=0;
	if(roundFinalValue==465){
     a0a:	41 3d       	cpi	r20, 0xD1	; 209
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	58 07       	cpc	r21, r24
     a10:	19 f5       	brne	.+70     	; 0xa58 <calculation+0xf2>
		
		numbers[count]='0';
     a12:	e3 ec       	ldi	r30, 0xC3	; 195
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	80 e3       	ldi	r24, 0x30	; 48
     a18:	80 83       	st	Z, r24
     a1a:	af e3       	ldi	r26, 0x3F	; 63
     a1c:	bf e1       	ldi	r27, 0x1F	; 31
     a1e:	11 97       	sbiw	r26, 0x01	; 1
     a20:	f1 f7       	brne	.-4      	; 0xa1e <calculation+0xb8>
     a22:	00 c0       	rjmp	.+0      	; 0xa24 <calculation+0xbe>
     a24:	00 00       	nop
		_delay_ms(2);
		numbers[count+1]='0';
     a26:	81 83       	std	Z+1, r24	; 0x01
	double decimalOutput=summation+1.0;                //Add 1 to summation after taking the complement 
	double finalValue=calibrationFactor*decimalOutput; //calibration factor(0.00002773232),This value should be calculated.
	loadCondition=round(finalValue);				   //round decimal values to integers
	int roundFinalValue=round(finalValue);
	
	int count=0;
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	1a c0       	rjmp	.+52     	; 0xa62 <calculation+0xfc>
		
		}else{
		
		while(roundFinalValue>0){						//Store values in "numbers" array.
			
			int remainder=roundFinalValue%10;			//Split 'roundFinalValue' into characters for displaying on LCD.
     a2e:	ca 01       	movw	r24, r20
     a30:	6a e0       	ldi	r22, 0x0A	; 10
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__divmodhi4>
			numbers[count]=remainder+'0';
     a38:	f9 01       	movw	r30, r18
     a3a:	ed 53       	subi	r30, 0x3D	; 61
     a3c:	ff 4f       	sbci	r31, 0xFF	; 255
     a3e:	80 5d       	subi	r24, 0xD0	; 208
     a40:	80 83       	st	Z, r24
			roundFinalValue=roundFinalValue/10;
     a42:	46 2f       	mov	r20, r22
     a44:	57 2f       	mov	r21, r23
			count++;
     a46:	2f 5f       	subi	r18, 0xFF	; 255
     a48:	3f 4f       	sbci	r19, 0xFF	; 255
     a4a:	8f e9       	ldi	r24, 0x9F	; 159
     a4c:	9f e0       	ldi	r25, 0x0F	; 15
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	f1 f7       	brne	.-4      	; 0xa4e <calculation+0xe8>
     a52:	00 c0       	rjmp	.+0      	; 0xa54 <calculation+0xee>
     a54:	00 00       	nop
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <calculation+0xf6>
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
		_delay_ms(2);
		numbers[count+1]='0';
		
		}else{
		
		while(roundFinalValue>0){						//Store values in "numbers" array.
     a5c:	14 16       	cp	r1, r20
     a5e:	15 06       	cpc	r1, r21
     a60:	34 f3       	brlt	.-52     	; 0xa2e <calculation+0xc8>
			
		}
	}
	return count;
	
}
     a62:	82 2f       	mov	r24, r18
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	cf 90       	pop	r12
     a70:	bf 90       	pop	r11
     a72:	af 90       	pop	r10
     a74:	9f 90       	pop	r9
     a76:	8f 90       	pop	r8
     a78:	08 95       	ret

00000a7a <loadCellFunction>:
//double callibrationFactor=1/36059;
char numbers[5];

void loadCellFunction(){
	
	PORTA|=(1<<Reading_Data);		//We need to set PD3 high before data retrieval
     a7a:	8b b3       	in	r24, 0x1b	; 27
     a7c:	80 64       	ori	r24, 0x40	; 64
     a7e:	8b bb       	out	0x1b, r24	; 27
	char d;							//Reading
	
	for(int i=0;i<24;i++){
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	18 c0       	rjmp	.+48     	; 0xab6 <loadCellFunction+0x3c>
									
		PORTA |= (1<<clock);		//Sending the clock pulse to PD_SCK to retrieve data
     a86:	2b b3       	in	r18, 0x1b	; 27
     a88:	20 68       	ori	r18, 0x80	; 128
     a8a:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a8c:	2a e0       	ldi	r18, 0x0A	; 10
     a8e:	2a 95       	dec	r18
     a90:	f1 f7       	brne	.-4      	; 0xa8e <loadCellFunction+0x14>
     a92:	00 c0       	rjmp	.+0      	; 0xa94 <loadCellFunction+0x1a>
		_delay_us(2);
		PORTA &= ~(1<<clock);
     a94:	2b b3       	in	r18, 0x1b	; 27
     a96:	2f 77       	andi	r18, 0x7F	; 127
     a98:	2b bb       	out	0x1b, r18	; 27

		
		if(!(~PINA & (1<<Reading_Data))){
     a9a:	ce 9b       	sbis	0x19, 6	; 25
     a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <loadCellFunction+0x28>
			d='1';
     a9e:	21 e3       	ldi	r18, 0x31	; 49
     aa0:	01 c0       	rjmp	.+2      	; 0xaa4 <loadCellFunction+0x2a>
			}else{
			d='0';
     aa2:	20 e3       	ldi	r18, 0x30	; 48
		}
		valueString[i]=d;			//i=0  MSD bit will be stored in the first location of the array
     aa4:	fc 01       	movw	r30, r24
     aa6:	e9 55       	subi	r30, 0x59	; 89
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	20 83       	st	Z, r18
     aac:	2a e0       	ldi	r18, 0x0A	; 10
     aae:	2a 95       	dec	r18
     ab0:	f1 f7       	brne	.-4      	; 0xaae <loadCellFunction+0x34>
     ab2:	00 c0       	rjmp	.+0      	; 0xab4 <loadCellFunction+0x3a>
void loadCellFunction(){
	
	PORTA|=(1<<Reading_Data);		//We need to set PD3 high before data retrieval
	char d;							//Reading
	
	for(int i=0;i<24;i++){
     ab4:	01 96       	adiw	r24, 0x01	; 1
     ab6:	88 31       	cpi	r24, 0x18	; 24
     ab8:	91 05       	cpc	r25, r1
     aba:	2c f3       	brlt	.-54     	; 0xa86 <loadCellFunction+0xc>
		}
		valueString[i]=d;			//i=0  MSD bit will be stored in the first location of the array
		_delay_us(2);
		
	}
	PORTA |= (1<<clock);			//25th pulse(if number of PD_SCK pulses are 25.Then the input channel is 'A' and the gain is 128)
     abc:	8b b3       	in	r24, 0x1b	; 27
     abe:	80 68       	ori	r24, 0x80	; 128
     ac0:	8b bb       	out	0x1b, r24	; 27
     ac2:	8a e0       	ldi	r24, 0x0A	; 10
     ac4:	8a 95       	dec	r24
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <loadCellFunction+0x4a>
     ac8:	00 c0       	rjmp	.+0      	; 0xaca <loadCellFunction+0x50>
	_delay_us(2);					//DOUT pin back to high.When DOUT is high output data is not ready for retrieval
	PORTA &= ~(1<<clock);
     aca:	8b b3       	in	r24, 0x1b	; 27
     acc:	8f 77       	andi	r24, 0x7F	; 127
     ace:	8b bb       	out	0x1b, r24	; 27
	digitAmount=calculation();		
     ad0:	0e 94 b3 04 	call	0x966	; 0x966 <calculation>
     ad4:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <digitAmount>
     ad8:	08 95       	ret

00000ada <main>:
int main(void)
{
    /* Replace with your application code */
	
	
	DDRA|=(1<<clock);
     ada:	8a b3       	in	r24, 0x1a	; 26
     adc:	80 68       	ori	r24, 0x80	; 128
     ade:	8a bb       	out	0x1a, r24	; 26
	DDRA&=~(0x10); //making input pin to get the voltage
     ae0:	8a b3       	in	r24, 0x1a	; 26
     ae2:	8f 7e       	andi	r24, 0xEF	; 239
     ae4:	8a bb       	out	0x1a, r24	; 26
	DDRB|=0x04;
     ae6:	87 b3       	in	r24, 0x17	; 23
     ae8:	84 60       	ori	r24, 0x04	; 4
     aea:	87 bb       	out	0x17, r24	; 23
	DDRD=0xF0;
     aec:	80 ef       	ldi	r24, 0xF0	; 240
     aee:	81 bb       	out	0x11, r24	; 17
	DDRC|=0x03;
     af0:	84 b3       	in	r24, 0x14	; 20
     af2:	83 60       	ori	r24, 0x03	; 3
     af4:	84 bb       	out	0x14, r24	; 20
	//making output pin for peltier device
	DDRA|=0x20;
     af6:	8a b3       	in	r24, 0x1a	; 26
     af8:	80 62       	ori	r24, 0x20	; 32
     afa:	8a bb       	out	0x1a, r24	; 26
	DDRB|=0x10; 
     afc:	87 b3       	in	r24, 0x17	; 23
     afe:	80 61       	ori	r24, 0x10	; 16
     b00:	87 bb       	out	0x17, r24	; 23
	DDRC|=0x40;		//making output pin for fans
     b02:	84 b3       	in	r24, 0x14	; 20
     b04:	80 64       	ori	r24, 0x40	; 64
     b06:	84 bb       	out	0x14, r24	; 20
	DDRC&=~(0x80);	//take input signal for foot massaging motor
     b08:	84 b3       	in	r24, 0x14	; 20
     b0a:	8f 77       	andi	r24, 0x7F	; 127
     b0c:	84 bb       	out	0x14, r24	; 20
	DDRB|=0xF8;		//making PB3,PB4,PB5,PB6,PB7 pin as output pin
     b0e:	87 b3       	in	r24, 0x17	; 23
     b10:	88 6f       	ori	r24, 0xF8	; 248
     b12:	87 bb       	out	0x17, r24	; 23
	DDRC|=0x3C;		// Make PORTC relevant pins as output
     b14:	84 b3       	in	r24, 0x14	; 20
     b16:	8c 63       	ori	r24, 0x3C	; 60
     b18:	84 bb       	out	0x14, r24	; 20
	
	
	//I2c & LCD display
	i2c_init();
     b1a:	0e 94 b4 02 	call	0x568	; 0x568 <i2c_init>
	i2c_start();
     b1e:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_start>
	i2c_write(0x70);
     b22:	80 e7       	ldi	r24, 0x70	; 112
     b24:	0e 94 c0 02 	call	0x580	; 0x580 <i2c_write>
	lcd_init();
     b28:	0e 94 ac 01 	call	0x358	; 0x358 <lcd_init>
    {
		
					
					/************Coding Section Key Pad*************/
		
			PORTD =0x0F;   //Make all columns 1 and all rows 0.
     b2c:	8f e0       	ldi	r24, 0x0F	; 15
     b2e:	82 bb       	out	0x12, r24	; 18

			x=Keypad();
     b30:	0e 94 8a 00 	call	0x114	; 0x114 <Keypad>
     b34:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <x>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b38:	8f e3       	ldi	r24, 0x3F	; 63
     b3a:	9c e9       	ldi	r25, 0x9C	; 156
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	f1 f7       	brne	.-4      	; 0xb3c <main+0x62>
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <main+0x68>
     b42:	00 00       	nop
			_delay_ms(10);
			if(x==7||x==4||x==1){
     b44:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <x>
     b48:	87 30       	cpi	r24, 0x07	; 7
     b4a:	21 f0       	breq	.+8      	; 0xb54 <main+0x7a>
     b4c:	84 30       	cpi	r24, 0x04	; 4
     b4e:	11 f0       	breq	.+4      	; 0xb54 <main+0x7a>
     b50:	81 30       	cpi	r24, 0x01	; 1
     b52:	11 f4       	brne	.+4      	; 0xb58 <main+0x7e>
				p=x;
     b54:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <p>
					/*************Coding Section UltraSonic**************/ 
			uint16_t r;
		
	
			//Set io port direction of sensor
			HCSR04Init();
     b58:	0e 94 64 02 	call	0x4c8	; 0x4c8 <HCSR04Init>
			
			
			//Send a trigger pulse
			HCSR04Trigger();                // calling the ultrasonic sound wave generator function
     b5c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <HCSR04Trigger>

			//Measure the width of pulse
			r=GetPulseWidth();              // getting the duration of the ultrasound took to echo back after hitting the object
     b60:	0e 94 73 02 	call	0x4e6	; 0x4e6 <GetPulseWidth>

			//Handle Errors
			if(r!=US_ERROR)                 // if micro controller doesn't get any pulse then it will set the US_ERROR variable to -1
     b64:	8f 3f       	cpi	r24, 0xFF	; 255
     b66:	2f ef       	ldi	r18, 0xFF	; 255
     b68:	92 07       	cpc	r25, r18
     b6a:	01 f3       	breq	.-64     	; 0xb2c <main+0x52>
			
			{
				
				distance=(r*0.034/2.0);			// This will give the distance in centimeters
     b6c:	bc 01       	movw	r22, r24
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 b1 08 	call	0x1162	; 0x1162 <__floatunsisf>
     b76:	26 e9       	ldi	r18, 0x96	; 150
     b78:	33 e4       	ldi	r19, 0x43	; 67
     b7a:	4b e0       	ldi	r20, 0x0B	; 11
     b7c:	5d e3       	ldi	r21, 0x3D	; 61
     b7e:	0e 94 3f 09 	call	0x127e	; 0x127e <__mulsf3>
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	40 e0       	ldi	r20, 0x00	; 0
     b88:	5f e3       	ldi	r21, 0x3F	; 63
     b8a:	0e 94 3f 09 	call	0x127e	; 0x127e <__mulsf3>
     b8e:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__fixsfsi>
     b92:	70 93 9c 00 	sts	0x009C, r23	; 0x80009c <distance+0x1>
     b96:	60 93 9b 00 	sts	0x009B, r22	; 0x80009b <distance>
												//	The speed of sound waves is 343 m/s
	
				
				if(distance<15 || buzzerCount<=6)
     b9a:	6f 30       	cpi	r22, 0x0F	; 15
     b9c:	71 05       	cpc	r23, r1
     b9e:	2c f0       	brlt	.+10     	; 0xbaa <main+0xd0>
     ba0:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <buzzerCount>
     ba4:	87 30       	cpi	r24, 0x07	; 7
     ba6:	08 f0       	brcs	.+2      	; 0xbaa <main+0xd0>
     ba8:	77 c1       	rjmp	.+750    	; 0xe98 <main+0x3be>
				{
					
					
					
					loadCellFunction();			//Activating Load cell
     baa:	0e 94 3d 05 	call	0xa7a	; 0xa7a <loadCellFunction>
				
					if(loadCondition<=15){		/*If the load which is generated is less than or equal to 15kg,
     bae:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <loadCondition>
     bb2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <loadCondition+0x1>
     bb6:	40 97       	sbiw	r24, 0x10	; 16
     bb8:	2c f4       	brge	.+10     	; 0xbc4 <main+0xea>
													then the massaging motor will be activated.*/
			
						massagingMotorFunction(x);//calling massagingMotorFunction(Start the motor)
     bba:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <x>
     bbe:	0e 94 08 02 	call	0x410	; 0x410 <massagingMotorFunction>
     bc2:	04 c0       	rjmp	.+8      	; 0xbcc <main+0xf2>
					}else{
			
						terminatingMotorFunction(x);//calling terminatingMotorFunction(Stop the motor)
     bc4:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <x>
     bc8:	0e 94 3f 02 	call	0x47e	; 0x47e <terminatingMotorFunction>
					
					
					
							/*************Coding Section for temperature sensor************/
							
						if(islcdON==0){	
     bcc:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     bd0:	81 11       	cpse	r24, r1
     bd2:	05 c0       	rjmp	.+10     	; 0xbde <main+0x104>
							lcd_cmd(0x0F);	
     bd4:	8f e0       	ldi	r24, 0x0F	; 15
     bd6:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd>
							count=0;
     bda:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <count>
						}
							islcdON=1;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
							if(count==0){
     be4:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <count>
     be8:	81 11       	cpse	r24, r1
     bea:	19 c0       	rjmp	.+50     	; 0xc1e <main+0x144>
								lcd_cmd(0x80);
     bec:	80 e8       	ldi	r24, 0x80	; 128
     bee:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd>
								lcd_msg("Battery:");
     bf2:	8d e6       	ldi	r24, 0x6D	; 109
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <lcd_msg>
								getVoltage();
     bfa:	0e 94 9d 04 	call	0x93a	; 0x93a <getVoltage>
								lcd_msg("%");
     bfe:	86 e7       	ldi	r24, 0x76	; 118
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <lcd_msg>
								lcd_cmd(0xC0);
     c06:	80 ec       	ldi	r24, 0xC0	; 192
     c08:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd>
								lcd_msg("Temp:");
     c0c:	88 e7       	ldi	r24, 0x78	; 120
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <lcd_msg>
								count++;							
     c14:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <count>
     c18:	8f 5f       	subi	r24, 0xFF	; 255
     c1a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <count>
							}
							
							//check the values of two temperature sensors
							temperature=getTemperature(enable);
     c1e:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <enable>
     c22:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <getTemperature>
     c26:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <temperature>
							temperature2=getTemperature2();
     c2a:	0e 94 12 03 	call	0x624	; 0x624 <getTemperature2>
     c2e:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <temperature2>
							
							
							if(temperature<=70 && temperature2<=70){	//Protect the peltier device from being damage
     c32:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <temperature>
     c36:	97 34       	cpi	r25, 0x47	; 71
     c38:	08 f0       	brcs	.+2      	; 0xc3c <main+0x162>
     c3a:	8b c0       	rjmp	.+278    	; 0xd52 <main+0x278>
     c3c:	87 34       	cpi	r24, 0x47	; 71
     c3e:	08 f0       	brcs	.+2      	; 0xc42 <main+0x168>
     c40:	88 c0       	rjmp	.+272    	; 0xd52 <main+0x278>
								if(p==7 || p==4){
     c42:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <p>
     c46:	87 30       	cpi	r24, 0x07	; 7
     c48:	11 f0       	breq	.+4      	; 0xc4e <main+0x174>
     c4a:	84 30       	cpi	r24, 0x04	; 4
     c4c:	11 f4       	brne	.+4      	; 0xc52 <main+0x178>
									activateFans();
     c4e:	0e 94 3f 03 	call	0x67e	; 0x67e <activateFans>
								}
								
								if(p==1){
     c52:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <p>
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	11 f4       	brne	.+4      	; 0xc5e <main+0x184>
									deactivateFans();
     c5a:	0e 94 43 03 	call	0x686	; 0x686 <deactivateFans>
								}
								
								//make hot the system when "H" button is pressed
								if((p==7 && enable==2) || (p==7 && enable==3) ||(p==7 && enable==4) ||(p==7 && enable==5)||(p==7 && enable==1)){
     c5e:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <p>
     c62:	87 30       	cpi	r24, 0x07	; 7
     c64:	31 f5       	brne	.+76     	; 0xcb2 <main+0x1d8>
     c66:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <enable>
     c6a:	91 50       	subi	r25, 0x01	; 1
     c6c:	95 30       	cpi	r25, 0x05	; 5
     c6e:	08 f5       	brcc	.+66     	; 0xcb2 <main+0x1d8>
									if(temperature<=28){
     c70:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <temperature>
     c74:	8d 31       	cpi	r24, 0x1D	; 29
     c76:	80 f4       	brcc	.+32     	; 0xc98 <main+0x1be>
										offFunction();
     c78:	0e 94 38 03 	call	0x670	; 0x670 <offFunction>
										lcd_cmd(0xCA);
     c7c:	8a ec       	ldi	r24, 0xCA	; 202
     c7e:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd>
     c82:	8f e3       	ldi	r24, 0x3F	; 63
     c84:	9c e9       	ldi	r25, 0x9C	; 156
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	f1 f7       	brne	.-4      	; 0xc86 <main+0x1ac>
     c8a:	00 c0       	rjmp	.+0      	; 0xc8c <main+0x1b2>
     c8c:	00 00       	nop
										_delay_ms(10);
										lcd_msg("..Wait");
     c8e:	8e e7       	ldi	r24, 0x7E	; 126
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <lcd_msg>
     c96:	16 c0       	rjmp	.+44     	; 0xcc4 <main+0x1ea>
										}else{
										heating();
     c98:	0e 94 31 03 	call	0x662	; 0x662 <heating>
										enable=1;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <enable>
										lcd_cmd(0xCA);
     ca2:	8a ec       	ldi	r24, 0xCA	; 202
     ca4:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd>
										lcd_msg("      ");
     ca8:	8a e8       	ldi	r24, 0x8A	; 138
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <lcd_msg>
     cb0:	09 c0       	rjmp	.+18     	; 0xcc4 <main+0x1ea>
									}
								}
								else if(p==7 && enable==0){
     cb2:	87 30       	cpi	r24, 0x07	; 7
     cb4:	39 f4       	brne	.+14     	; 0xcc4 <main+0x1ea>
     cb6:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <enable>
     cba:	81 11       	cpse	r24, r1
     cbc:	03 c0       	rjmp	.+6      	; 0xcc4 <main+0x1ea>
									enable=1;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <enable>
								}
								
								//cool the system when "C" button is pressed
								if((p==4 && enable==1) || (p==4 && enable==3) ||(p==4 && enable==4) ||(p==4 && enable==5)||(p==4 && enable==2)){
     cc4:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <p>
     cc8:	84 30       	cpi	r24, 0x04	; 4
     cca:	39 f5       	brne	.+78     	; 0xd1a <main+0x240>
     ccc:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <enable>
     cd0:	91 30       	cpi	r25, 0x01	; 1
     cd2:	41 f0       	breq	.+16     	; 0xce4 <main+0x20a>
     cd4:	93 30       	cpi	r25, 0x03	; 3
     cd6:	31 f0       	breq	.+12     	; 0xce4 <main+0x20a>
     cd8:	94 30       	cpi	r25, 0x04	; 4
     cda:	21 f0       	breq	.+8      	; 0xce4 <main+0x20a>
     cdc:	95 30       	cpi	r25, 0x05	; 5
     cde:	11 f0       	breq	.+4      	; 0xce4 <main+0x20a>
     ce0:	92 30       	cpi	r25, 0x02	; 2
     ce2:	d9 f4       	brne	.+54     	; 0xd1a <main+0x240>
									if(temperature>=28){
     ce4:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <temperature>
     ce8:	8c 31       	cpi	r24, 0x1C	; 28
     cea:	50 f0       	brcs	.+20     	; 0xd00 <main+0x226>
										offFunction();
     cec:	0e 94 38 03 	call	0x670	; 0x670 <offFunction>
										lcd_cmd(0xCA);
     cf0:	8a ec       	ldi	r24, 0xCA	; 202
     cf2:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd>
										lcd_msg("..Wait");
     cf6:	8e e7       	ldi	r24, 0x7E	; 126
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <lcd_msg>
     cfe:	18 c0       	rjmp	.+48     	; 0xd30 <main+0x256>
										}else{
										cooling();
     d00:	0e 94 2a 03 	call	0x654	; 0x654 <cooling>
										enable=2;
     d04:	82 e0       	ldi	r24, 0x02	; 2
     d06:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <enable>
										lcd_cmd(0xCA);
     d0a:	8a ec       	ldi	r24, 0xCA	; 202
     d0c:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd>
										lcd_msg("      ");
     d10:	8a e8       	ldi	r24, 0x8A	; 138
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <lcd_msg>
     d18:	0b c0       	rjmp	.+22     	; 0xd30 <main+0x256>
									}

								}
								else if(p==4 && enable==0){
     d1a:	84 30       	cpi	r24, 0x04	; 4
     d1c:	49 f4       	brne	.+18     	; 0xd30 <main+0x256>
     d1e:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <enable>
     d22:	81 11       	cpse	r24, r1
     d24:	05 c0       	rjmp	.+10     	; 0xd30 <main+0x256>
									cooling();
     d26:	0e 94 2a 03 	call	0x654	; 0x654 <cooling>
									enable=2;
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <enable>
								}
								
								//off the peltier device when "OFF" button is pressed
								if(p==1){
     d30:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <p>
     d34:	81 30       	cpi	r24, 0x01	; 1
     d36:	21 f5       	brne	.+72     	; 0xd80 <main+0x2a6>
									offFunction();
     d38:	0e 94 38 03 	call	0x670	; 0x670 <offFunction>
									enable=3;
     d3c:	83 e0       	ldi	r24, 0x03	; 3
     d3e:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <enable>
									lcd_cmd(0xC5);
     d42:	85 ec       	ldi	r24, 0xC5	; 197
     d44:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd>
									lcd_msg("           ");
     d48:	85 e8       	ldi	r24, 0x85	; 133
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <lcd_msg>
     d50:	17 c0       	rjmp	.+46     	; 0xd80 <main+0x2a6>
								}
								
								}else if(temperature>70 || temperature2>70){
     d52:	97 34       	cpi	r25, 0x47	; 71
     d54:	10 f4       	brcc	.+4      	; 0xd5a <main+0x280>
     d56:	87 34       	cpi	r24, 0x47	; 71
     d58:	98 f0       	brcs	.+38     	; 0xd80 <main+0x2a6>
								activateFans();
     d5a:	0e 94 3f 03 	call	0x67e	; 0x67e <activateFans>
     d5e:	8f e3       	ldi	r24, 0x3F	; 63
     d60:	9c e9       	ldi	r25, 0x9C	; 156
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	f1 f7       	brne	.-4      	; 0xd62 <main+0x288>
     d66:	00 c0       	rjmp	.+0      	; 0xd68 <main+0x28e>
     d68:	00 00       	nop
								_delay_ms(10);
								offFunction();
     d6a:	0e 94 38 03 	call	0x670	; 0x670 <offFunction>
     d6e:	8f e3       	ldi	r24, 0x3F	; 63
     d70:	9c e9       	ldi	r25, 0x9C	; 156
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	f1 f7       	brne	.-4      	; 0xd72 <main+0x298>
     d76:	00 c0       	rjmp	.+0      	; 0xd78 <main+0x29e>
     d78:	00 00       	nop
								_delay_ms(10);
								enable=4;
     d7a:	84 e0       	ldi	r24, 0x04	; 4
     d7c:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <enable>
							}
							
						//Automated footrest and massaging motor
				
						if(PINC==(PINC|0x80)){
     d80:	93 b3       	in	r25, 0x13	; 19
     d82:	83 b3       	in	r24, 0x13	; 19
     d84:	80 68       	ori	r24, 0x80	; 128
     d86:	98 13       	cpse	r25, r24
     d88:	05 c0       	rjmp	.+10     	; 0xd94 <main+0x2ba>
							footMassager(x);
     d8a:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <x>
     d8e:	0e 94 47 03 	call	0x68e	; 0x68e <footMassager>
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <main+0x2be>
							}else {
							eliminateFootMassager();
     d94:	0e 94 5f 03 	call	0x6be	; 0x6be <eliminateFootMassager>
							}
				
							footElevator(x);		//Move foot elevator
     d98:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <x>
     d9c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <footElevator>
							
							
							//Stepper motor function for lumber supporter//
							
							 if(x==10)				//if 0 button is pressed
     da0:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <x>
     da4:	8a 30       	cpi	r24, 0x0A	; 10
     da6:	99 f5       	brne	.+102    	; 0xe0e <main+0x334>
							 {
								 y++;
     da8:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <y>
     dac:	8f 5f       	subi	r24, 0xFF	; 255
     dae:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <y>
								 if(y==1)
     db2:	81 30       	cpi	r24, 0x01	; 1
     db4:	11 f4       	brne	.+4      	; 0xdba <main+0x2e0>
								 {
									 lumbersupportForward1();
     db6:	0e 94 92 03 	call	0x724	; 0x724 <lumbersupportForward1>
								 }
								 if(y==2)
     dba:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <y>
     dbe:	82 30       	cpi	r24, 0x02	; 2
     dc0:	11 f4       	brne	.+4      	; 0xdc6 <main+0x2ec>
								 {
									 lumbersupportForward2();
     dc2:	0e 94 9e 03 	call	0x73c	; 0x73c <lumbersupportForward2>
								 }
								 if(y==3)
     dc6:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <y>
     dca:	83 30       	cpi	r24, 0x03	; 3
     dcc:	11 f4       	brne	.+4      	; 0xdd2 <main+0x2f8>
								 {
									 lumbersupportForward3();
     dce:	0e 94 aa 03 	call	0x754	; 0x754 <lumbersupportForward3>
								 }
								 if(y==4)
     dd2:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <y>
     dd6:	84 30       	cpi	r24, 0x04	; 4
     dd8:	11 f4       	brne	.+4      	; 0xdde <main+0x304>
								 {
									 lumbersupportForward4();
     dda:	0e 94 b6 03 	call	0x76c	; 0x76c <lumbersupportForward4>
								 }
								 if(y==5)
     dde:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <y>
     de2:	85 30       	cpi	r24, 0x05	; 5
     de4:	11 f4       	brne	.+4      	; 0xdea <main+0x310>
								 {
									 lumbersupportForward5();
     de6:	0e 94 c2 03 	call	0x784	; 0x784 <lumbersupportForward5>
								 }
								 if(y==6)
     dea:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <y>
     dee:	86 30       	cpi	r24, 0x06	; 6
     df0:	11 f4       	brne	.+4      	; 0xdf6 <main+0x31c>
								 {
									 lumbersupportForward6();
     df2:	0e 94 ce 03 	call	0x79c	; 0x79c <lumbersupportForward6>
								 }
								 if(y==7)
     df6:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <y>
     dfa:	87 30       	cpi	r24, 0x07	; 7
     dfc:	11 f4       	brne	.+4      	; 0xe02 <main+0x328>
								 {
									 lumbersupportForward7();
     dfe:	0e 94 da 03 	call	0x7b4	; 0x7b4 <lumbersupportForward7>
								 }
								 if(y==8)
     e02:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <y>
     e06:	88 30       	cpi	r24, 0x08	; 8
     e08:	11 f4       	brne	.+4      	; 0xe0e <main+0x334>
								 {
									 lumbersupportForward8();
     e0a:	0e 94 e6 03 	call	0x7cc	; 0x7cc <lumbersupportForward8>
								 }
								 
							 }
							 
							 
							 if(x==11)				//if = button is pressed
     e0e:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <x>
     e12:	8b 30       	cpi	r24, 0x0B	; 11
     e14:	a9 f5       	brne	.+106    	; 0xe80 <main+0x3a6>
							 {
								 
								 if(y==8)
     e16:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <y>
     e1a:	88 30       	cpi	r24, 0x08	; 8
     e1c:	11 f4       	brne	.+4      	; 0xe22 <main+0x348>
								 {
									 lumbersupportBackward1();
     e1e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <lumbersupportBackward1>
								 }
								 if(y==7)
     e22:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <y>
     e26:	87 30       	cpi	r24, 0x07	; 7
     e28:	11 f4       	brne	.+4      	; 0xe2e <main+0x354>
								 {
									 lumbersupportBackward2();
     e2a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <lumbersupportBackward2>
								 }
								 if(y==6)
     e2e:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <y>
     e32:	86 30       	cpi	r24, 0x06	; 6
     e34:	11 f4       	brne	.+4      	; 0xe3a <main+0x360>
								 {
									 lumbersupportBackward3();
     e36:	0e 94 0a 04 	call	0x814	; 0x814 <lumbersupportBackward3>
								 }
								 if(y==5)
     e3a:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <y>
     e3e:	85 30       	cpi	r24, 0x05	; 5
     e40:	11 f4       	brne	.+4      	; 0xe46 <main+0x36c>
								 {
									 lumbersupportBackward4();
     e42:	0e 94 16 04 	call	0x82c	; 0x82c <lumbersupportBackward4>
								 }
								 if(y==4)
     e46:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <y>
     e4a:	84 30       	cpi	r24, 0x04	; 4
     e4c:	11 f4       	brne	.+4      	; 0xe52 <main+0x378>
								 {
									 lumbersupportBackward5();
     e4e:	0e 94 22 04 	call	0x844	; 0x844 <lumbersupportBackward5>
								 }
								 if(y==3)
     e52:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <y>
     e56:	83 30       	cpi	r24, 0x03	; 3
     e58:	11 f4       	brne	.+4      	; 0xe5e <main+0x384>
								 {
									 lumbersupportBackward6();
     e5a:	0e 94 2e 04 	call	0x85c	; 0x85c <lumbersupportBackward6>
								 }
								 if(y==2)
     e5e:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <y>
     e62:	82 30       	cpi	r24, 0x02	; 2
     e64:	11 f4       	brne	.+4      	; 0xe6a <main+0x390>
								 {
									 lumbersupportBackward7();
     e66:	0e 94 3a 04 	call	0x874	; 0x874 <lumbersupportBackward7>
								 }
								 if(y==1)
     e6a:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <y>
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	11 f4       	brne	.+4      	; 0xe76 <main+0x39c>
								 {
									 lumbersupportBackward8();
     e72:	0e 94 46 04 	call	0x88c	; 0x88c <lumbersupportBackward8>
								 }
								 y--;
     e76:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <y>
     e7a:	81 50       	subi	r24, 0x01	; 1
     e7c:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <y>
								 
							 }
							 
					if(buzzerCount<=7 && distance<15){
     e80:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <buzzerCount>
     e84:	88 30       	cpi	r24, 0x08	; 8
     e86:	40 f4       	brcc	.+16     	; 0xe98 <main+0x3be>
     e88:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <distance>
     e8c:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <distance+0x1>
     e90:	0f 97       	sbiw	r24, 0x0f	; 15
     e92:	14 f4       	brge	.+4      	; 0xe98 <main+0x3be>
						buzzerCount=0;					//Reset the buzzer count
     e94:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <buzzerCount>
					}
				}
				
				
				if(distance>=15)
     e98:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <distance>
     e9c:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <distance+0x1>
     ea0:	0f 97       	sbiw	r24, 0x0f	; 15
     ea2:	0c f4       	brge	.+2      	; 0xea6 <main+0x3cc>
     ea4:	43 ce       	rjmp	.-890    	; 0xb2c <main+0x52>
				{										
			
			
					if(buzzerCount<=5){
     ea6:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <buzzerCount>
     eaa:	86 30       	cpi	r24, 0x06	; 6
     eac:	d8 f4       	brcc	.+54     	; 0xee4 <main+0x40a>
							PORTB|=0x04;				//Turn on the buzzer (Six beep sounds are generated)
     eae:	88 b3       	in	r24, 0x18	; 24
     eb0:	84 60       	ori	r24, 0x04	; 4
     eb2:	88 bb       	out	0x18, r24	; 24
     eb4:	8f e1       	ldi	r24, 0x1F	; 31
     eb6:	9e e4       	ldi	r25, 0x4E	; 78
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	f1 f7       	brne	.-4      	; 0xeb8 <main+0x3de>
     ebc:	00 c0       	rjmp	.+0      	; 0xebe <main+0x3e4>
     ebe:	00 00       	nop
							_delay_ms(5);
							PORTB&=~(0x04);				//Turn off the buzzer
     ec0:	88 b3       	in	r24, 0x18	; 24
     ec2:	8b 7f       	andi	r24, 0xFB	; 251
     ec4:	88 bb       	out	0x18, r24	; 24
     ec6:	9f ef       	ldi	r25, 0xFF	; 255
     ec8:	21 ee       	ldi	r18, 0xE1	; 225
     eca:	84 e0       	ldi	r24, 0x04	; 4
     ecc:	91 50       	subi	r25, 0x01	; 1
     ece:	20 40       	sbci	r18, 0x00	; 0
     ed0:	80 40       	sbci	r24, 0x00	; 0
     ed2:	e1 f7       	brne	.-8      	; 0xecc <main+0x3f2>
     ed4:	00 c0       	rjmp	.+0      	; 0xed6 <main+0x3fc>
     ed6:	00 00       	nop
							_delay_ms(100);
							buzzerCount++;				//Increase buzzer count by 1
     ed8:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <buzzerCount>
     edc:	8f 5f       	subi	r24, 0xFF	; 255
     ede:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <buzzerCount>
     ee2:	24 ce       	rjmp	.-952    	; 0xb2c <main+0x52>
					}else if(buzzerCount>5 && buzzerCount<=6){
     ee4:	86 30       	cpi	r24, 0x06	; 6
     ee6:	91 f4       	brne	.+36     	; 0xf0c <main+0x432>
						PORTB|=0x04;					//Turn on the buzzer (Continuous beep sound is generated)
     ee8:	88 b3       	in	r24, 0x18	; 24
     eea:	84 60       	ori	r24, 0x04	; 4
     eec:	88 bb       	out	0x18, r24	; 24
     eee:	9f ef       	ldi	r25, 0xFF	; 255
     ef0:	21 ee       	ldi	r18, 0xE1	; 225
     ef2:	84 e0       	ldi	r24, 0x04	; 4
     ef4:	91 50       	subi	r25, 0x01	; 1
     ef6:	20 40       	sbci	r18, 0x00	; 0
     ef8:	80 40       	sbci	r24, 0x00	; 0
     efa:	e1 f7       	brne	.-8      	; 0xef4 <main+0x41a>
     efc:	00 c0       	rjmp	.+0      	; 0xefe <main+0x424>
     efe:	00 00       	nop
						_delay_ms(100);
						buzzerCount++;					//Increase buzzer count by 1
     f00:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <buzzerCount>
     f04:	8f 5f       	subi	r24, 0xFF	; 255
     f06:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <buzzerCount>
     f0a:	10 ce       	rjmp	.-992    	; 0xb2c <main+0x52>
					}else{
						PORTB&=~(0x04);					//Turn off the buzzer
     f0c:	88 b3       	in	r24, 0x18	; 24
     f0e:	8b 7f       	andi	r24, 0xFB	; 251
     f10:	88 bb       	out	0x18, r24	; 24
						
						deactivateFans();				//Turn off fans
     f12:	0e 94 43 03 	call	0x686	; 0x686 <deactivateFans>
						
						offFunction();					//Turn off peltier device
     f16:	0e 94 38 03 	call	0x670	; 0x670 <offFunction>
						enable=5;
     f1a:	85 e0       	ldi	r24, 0x05	; 5
     f1c:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <enable>
						lcd_cmd(0x08);					//Turn off LCD display
     f20:	88 e0       	ldi	r24, 0x08	; 8
     f22:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_cmd>
						islcdON=0;
     f26:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__data_end>
						
						terminatingMotorFunction(x);	//calling terminatingMotorFunction(Stop the motor)
     f2a:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <x>
     f2e:	0e 94 3f 02 	call	0x47e	; 0x47e <terminatingMotorFunction>
						
						eliminateFootMassager();		//Turn off foot massaging motor
     f32:	0e 94 5f 03 	call	0x6be	; 0x6be <eliminateFootMassager>
     f36:	fa cd       	rjmp	.-1036   	; 0xb2c <main+0x52>

00000f38 <__subsf3>:
     f38:	50 58       	subi	r21, 0x80	; 128

00000f3a <__addsf3>:
     f3a:	bb 27       	eor	r27, r27
     f3c:	aa 27       	eor	r26, r26
     f3e:	0e 94 b4 07 	call	0xf68	; 0xf68 <__addsf3x>
     f42:	0c 94 05 09 	jmp	0x120a	; 0x120a <__fp_round>
     f46:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fp_pscA>
     f4a:	38 f0       	brcs	.+14     	; 0xf5a <__addsf3+0x20>
     f4c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__fp_pscB>
     f50:	20 f0       	brcs	.+8      	; 0xf5a <__addsf3+0x20>
     f52:	39 f4       	brne	.+14     	; 0xf62 <__addsf3+0x28>
     f54:	9f 3f       	cpi	r25, 0xFF	; 255
     f56:	19 f4       	brne	.+6      	; 0xf5e <__addsf3+0x24>
     f58:	26 f4       	brtc	.+8      	; 0xf62 <__addsf3+0x28>
     f5a:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__fp_nan>
     f5e:	0e f4       	brtc	.+2      	; 0xf62 <__addsf3+0x28>
     f60:	e0 95       	com	r30
     f62:	e7 fb       	bst	r30, 7
     f64:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__fp_inf>

00000f68 <__addsf3x>:
     f68:	e9 2f       	mov	r30, r25
     f6a:	0e 94 16 09 	call	0x122c	; 0x122c <__fp_split3>
     f6e:	58 f3       	brcs	.-42     	; 0xf46 <__addsf3+0xc>
     f70:	ba 17       	cp	r27, r26
     f72:	62 07       	cpc	r22, r18
     f74:	73 07       	cpc	r23, r19
     f76:	84 07       	cpc	r24, r20
     f78:	95 07       	cpc	r25, r21
     f7a:	20 f0       	brcs	.+8      	; 0xf84 <__addsf3x+0x1c>
     f7c:	79 f4       	brne	.+30     	; 0xf9c <__addsf3x+0x34>
     f7e:	a6 f5       	brtc	.+104    	; 0xfe8 <__addsf3x+0x80>
     f80:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__fp_zero>
     f84:	0e f4       	brtc	.+2      	; 0xf88 <__addsf3x+0x20>
     f86:	e0 95       	com	r30
     f88:	0b 2e       	mov	r0, r27
     f8a:	ba 2f       	mov	r27, r26
     f8c:	a0 2d       	mov	r26, r0
     f8e:	0b 01       	movw	r0, r22
     f90:	b9 01       	movw	r22, r18
     f92:	90 01       	movw	r18, r0
     f94:	0c 01       	movw	r0, r24
     f96:	ca 01       	movw	r24, r20
     f98:	a0 01       	movw	r20, r0
     f9a:	11 24       	eor	r1, r1
     f9c:	ff 27       	eor	r31, r31
     f9e:	59 1b       	sub	r21, r25
     fa0:	99 f0       	breq	.+38     	; 0xfc8 <__addsf3x+0x60>
     fa2:	59 3f       	cpi	r21, 0xF9	; 249
     fa4:	50 f4       	brcc	.+20     	; 0xfba <__addsf3x+0x52>
     fa6:	50 3e       	cpi	r21, 0xE0	; 224
     fa8:	68 f1       	brcs	.+90     	; 0x1004 <__addsf3x+0x9c>
     faa:	1a 16       	cp	r1, r26
     fac:	f0 40       	sbci	r31, 0x00	; 0
     fae:	a2 2f       	mov	r26, r18
     fb0:	23 2f       	mov	r18, r19
     fb2:	34 2f       	mov	r19, r20
     fb4:	44 27       	eor	r20, r20
     fb6:	58 5f       	subi	r21, 0xF8	; 248
     fb8:	f3 cf       	rjmp	.-26     	; 0xfa0 <__addsf3x+0x38>
     fba:	46 95       	lsr	r20
     fbc:	37 95       	ror	r19
     fbe:	27 95       	ror	r18
     fc0:	a7 95       	ror	r26
     fc2:	f0 40       	sbci	r31, 0x00	; 0
     fc4:	53 95       	inc	r21
     fc6:	c9 f7       	brne	.-14     	; 0xfba <__addsf3x+0x52>
     fc8:	7e f4       	brtc	.+30     	; 0xfe8 <__addsf3x+0x80>
     fca:	1f 16       	cp	r1, r31
     fcc:	ba 0b       	sbc	r27, r26
     fce:	62 0b       	sbc	r22, r18
     fd0:	73 0b       	sbc	r23, r19
     fd2:	84 0b       	sbc	r24, r20
     fd4:	ba f0       	brmi	.+46     	; 0x1004 <__addsf3x+0x9c>
     fd6:	91 50       	subi	r25, 0x01	; 1
     fd8:	a1 f0       	breq	.+40     	; 0x1002 <__addsf3x+0x9a>
     fda:	ff 0f       	add	r31, r31
     fdc:	bb 1f       	adc	r27, r27
     fde:	66 1f       	adc	r22, r22
     fe0:	77 1f       	adc	r23, r23
     fe2:	88 1f       	adc	r24, r24
     fe4:	c2 f7       	brpl	.-16     	; 0xfd6 <__addsf3x+0x6e>
     fe6:	0e c0       	rjmp	.+28     	; 0x1004 <__addsf3x+0x9c>
     fe8:	ba 0f       	add	r27, r26
     fea:	62 1f       	adc	r22, r18
     fec:	73 1f       	adc	r23, r19
     fee:	84 1f       	adc	r24, r20
     ff0:	48 f4       	brcc	.+18     	; 0x1004 <__addsf3x+0x9c>
     ff2:	87 95       	ror	r24
     ff4:	77 95       	ror	r23
     ff6:	67 95       	ror	r22
     ff8:	b7 95       	ror	r27
     ffa:	f7 95       	ror	r31
     ffc:	9e 3f       	cpi	r25, 0xFE	; 254
     ffe:	08 f0       	brcs	.+2      	; 0x1002 <__addsf3x+0x9a>
    1000:	b0 cf       	rjmp	.-160    	; 0xf62 <__addsf3+0x28>
    1002:	93 95       	inc	r25
    1004:	88 0f       	add	r24, r24
    1006:	08 f0       	brcs	.+2      	; 0x100a <__addsf3x+0xa2>
    1008:	99 27       	eor	r25, r25
    100a:	ee 0f       	add	r30, r30
    100c:	97 95       	ror	r25
    100e:	87 95       	ror	r24
    1010:	08 95       	ret

00001012 <__divsf3>:
    1012:	0e 94 1d 08 	call	0x103a	; 0x103a <__divsf3x>
    1016:	0c 94 05 09 	jmp	0x120a	; 0x120a <__fp_round>
    101a:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__fp_pscB>
    101e:	58 f0       	brcs	.+22     	; 0x1036 <__divsf3+0x24>
    1020:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fp_pscA>
    1024:	40 f0       	brcs	.+16     	; 0x1036 <__divsf3+0x24>
    1026:	29 f4       	brne	.+10     	; 0x1032 <__divsf3+0x20>
    1028:	5f 3f       	cpi	r21, 0xFF	; 255
    102a:	29 f0       	breq	.+10     	; 0x1036 <__divsf3+0x24>
    102c:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__fp_inf>
    1030:	51 11       	cpse	r21, r1
    1032:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__fp_szero>
    1036:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__fp_nan>

0000103a <__divsf3x>:
    103a:	0e 94 16 09 	call	0x122c	; 0x122c <__fp_split3>
    103e:	68 f3       	brcs	.-38     	; 0x101a <__divsf3+0x8>

00001040 <__divsf3_pse>:
    1040:	99 23       	and	r25, r25
    1042:	b1 f3       	breq	.-20     	; 0x1030 <__divsf3+0x1e>
    1044:	55 23       	and	r21, r21
    1046:	91 f3       	breq	.-28     	; 0x102c <__divsf3+0x1a>
    1048:	95 1b       	sub	r25, r21
    104a:	55 0b       	sbc	r21, r21
    104c:	bb 27       	eor	r27, r27
    104e:	aa 27       	eor	r26, r26
    1050:	62 17       	cp	r22, r18
    1052:	73 07       	cpc	r23, r19
    1054:	84 07       	cpc	r24, r20
    1056:	38 f0       	brcs	.+14     	; 0x1066 <__divsf3_pse+0x26>
    1058:	9f 5f       	subi	r25, 0xFF	; 255
    105a:	5f 4f       	sbci	r21, 0xFF	; 255
    105c:	22 0f       	add	r18, r18
    105e:	33 1f       	adc	r19, r19
    1060:	44 1f       	adc	r20, r20
    1062:	aa 1f       	adc	r26, r26
    1064:	a9 f3       	breq	.-22     	; 0x1050 <__divsf3_pse+0x10>
    1066:	35 d0       	rcall	.+106    	; 0x10d2 <__divsf3_pse+0x92>
    1068:	0e 2e       	mov	r0, r30
    106a:	3a f0       	brmi	.+14     	; 0x107a <__divsf3_pse+0x3a>
    106c:	e0 e8       	ldi	r30, 0x80	; 128
    106e:	32 d0       	rcall	.+100    	; 0x10d4 <__divsf3_pse+0x94>
    1070:	91 50       	subi	r25, 0x01	; 1
    1072:	50 40       	sbci	r21, 0x00	; 0
    1074:	e6 95       	lsr	r30
    1076:	00 1c       	adc	r0, r0
    1078:	ca f7       	brpl	.-14     	; 0x106c <__divsf3_pse+0x2c>
    107a:	2b d0       	rcall	.+86     	; 0x10d2 <__divsf3_pse+0x92>
    107c:	fe 2f       	mov	r31, r30
    107e:	29 d0       	rcall	.+82     	; 0x10d2 <__divsf3_pse+0x92>
    1080:	66 0f       	add	r22, r22
    1082:	77 1f       	adc	r23, r23
    1084:	88 1f       	adc	r24, r24
    1086:	bb 1f       	adc	r27, r27
    1088:	26 17       	cp	r18, r22
    108a:	37 07       	cpc	r19, r23
    108c:	48 07       	cpc	r20, r24
    108e:	ab 07       	cpc	r26, r27
    1090:	b0 e8       	ldi	r27, 0x80	; 128
    1092:	09 f0       	breq	.+2      	; 0x1096 <__divsf3_pse+0x56>
    1094:	bb 0b       	sbc	r27, r27
    1096:	80 2d       	mov	r24, r0
    1098:	bf 01       	movw	r22, r30
    109a:	ff 27       	eor	r31, r31
    109c:	93 58       	subi	r25, 0x83	; 131
    109e:	5f 4f       	sbci	r21, 0xFF	; 255
    10a0:	3a f0       	brmi	.+14     	; 0x10b0 <__divsf3_pse+0x70>
    10a2:	9e 3f       	cpi	r25, 0xFE	; 254
    10a4:	51 05       	cpc	r21, r1
    10a6:	78 f0       	brcs	.+30     	; 0x10c6 <__divsf3_pse+0x86>
    10a8:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__fp_inf>
    10ac:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__fp_szero>
    10b0:	5f 3f       	cpi	r21, 0xFF	; 255
    10b2:	e4 f3       	brlt	.-8      	; 0x10ac <__divsf3_pse+0x6c>
    10b4:	98 3e       	cpi	r25, 0xE8	; 232
    10b6:	d4 f3       	brlt	.-12     	; 0x10ac <__divsf3_pse+0x6c>
    10b8:	86 95       	lsr	r24
    10ba:	77 95       	ror	r23
    10bc:	67 95       	ror	r22
    10be:	b7 95       	ror	r27
    10c0:	f7 95       	ror	r31
    10c2:	9f 5f       	subi	r25, 0xFF	; 255
    10c4:	c9 f7       	brne	.-14     	; 0x10b8 <__divsf3_pse+0x78>
    10c6:	88 0f       	add	r24, r24
    10c8:	91 1d       	adc	r25, r1
    10ca:	96 95       	lsr	r25
    10cc:	87 95       	ror	r24
    10ce:	97 f9       	bld	r25, 7
    10d0:	08 95       	ret
    10d2:	e1 e0       	ldi	r30, 0x01	; 1
    10d4:	66 0f       	add	r22, r22
    10d6:	77 1f       	adc	r23, r23
    10d8:	88 1f       	adc	r24, r24
    10da:	bb 1f       	adc	r27, r27
    10dc:	62 17       	cp	r22, r18
    10de:	73 07       	cpc	r23, r19
    10e0:	84 07       	cpc	r24, r20
    10e2:	ba 07       	cpc	r27, r26
    10e4:	20 f0       	brcs	.+8      	; 0x10ee <__divsf3_pse+0xae>
    10e6:	62 1b       	sub	r22, r18
    10e8:	73 0b       	sbc	r23, r19
    10ea:	84 0b       	sbc	r24, r20
    10ec:	ba 0b       	sbc	r27, r26
    10ee:	ee 1f       	adc	r30, r30
    10f0:	88 f7       	brcc	.-30     	; 0x10d4 <__divsf3_pse+0x94>
    10f2:	e0 95       	com	r30
    10f4:	08 95       	ret

000010f6 <__fixsfsi>:
    10f6:	0e 94 82 08 	call	0x1104	; 0x1104 <__fixunssfsi>
    10fa:	68 94       	set
    10fc:	b1 11       	cpse	r27, r1
    10fe:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__fp_szero>
    1102:	08 95       	ret

00001104 <__fixunssfsi>:
    1104:	0e 94 1e 09 	call	0x123c	; 0x123c <__fp_splitA>
    1108:	88 f0       	brcs	.+34     	; 0x112c <__fixunssfsi+0x28>
    110a:	9f 57       	subi	r25, 0x7F	; 127
    110c:	98 f0       	brcs	.+38     	; 0x1134 <__fixunssfsi+0x30>
    110e:	b9 2f       	mov	r27, r25
    1110:	99 27       	eor	r25, r25
    1112:	b7 51       	subi	r27, 0x17	; 23
    1114:	b0 f0       	brcs	.+44     	; 0x1142 <__fixunssfsi+0x3e>
    1116:	e1 f0       	breq	.+56     	; 0x1150 <__fixunssfsi+0x4c>
    1118:	66 0f       	add	r22, r22
    111a:	77 1f       	adc	r23, r23
    111c:	88 1f       	adc	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	1a f0       	brmi	.+6      	; 0x1128 <__fixunssfsi+0x24>
    1122:	ba 95       	dec	r27
    1124:	c9 f7       	brne	.-14     	; 0x1118 <__fixunssfsi+0x14>
    1126:	14 c0       	rjmp	.+40     	; 0x1150 <__fixunssfsi+0x4c>
    1128:	b1 30       	cpi	r27, 0x01	; 1
    112a:	91 f0       	breq	.+36     	; 0x1150 <__fixunssfsi+0x4c>
    112c:	0e 94 38 09 	call	0x1270	; 0x1270 <__fp_zero>
    1130:	b1 e0       	ldi	r27, 0x01	; 1
    1132:	08 95       	ret
    1134:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__fp_zero>
    1138:	67 2f       	mov	r22, r23
    113a:	78 2f       	mov	r23, r24
    113c:	88 27       	eor	r24, r24
    113e:	b8 5f       	subi	r27, 0xF8	; 248
    1140:	39 f0       	breq	.+14     	; 0x1150 <__fixunssfsi+0x4c>
    1142:	b9 3f       	cpi	r27, 0xF9	; 249
    1144:	cc f3       	brlt	.-14     	; 0x1138 <__fixunssfsi+0x34>
    1146:	86 95       	lsr	r24
    1148:	77 95       	ror	r23
    114a:	67 95       	ror	r22
    114c:	b3 95       	inc	r27
    114e:	d9 f7       	brne	.-10     	; 0x1146 <__fixunssfsi+0x42>
    1150:	3e f4       	brtc	.+14     	; 0x1160 <__fixunssfsi+0x5c>
    1152:	90 95       	com	r25
    1154:	80 95       	com	r24
    1156:	70 95       	com	r23
    1158:	61 95       	neg	r22
    115a:	7f 4f       	sbci	r23, 0xFF	; 255
    115c:	8f 4f       	sbci	r24, 0xFF	; 255
    115e:	9f 4f       	sbci	r25, 0xFF	; 255
    1160:	08 95       	ret

00001162 <__floatunsisf>:
    1162:	e8 94       	clt
    1164:	09 c0       	rjmp	.+18     	; 0x1178 <__floatsisf+0x12>

00001166 <__floatsisf>:
    1166:	97 fb       	bst	r25, 7
    1168:	3e f4       	brtc	.+14     	; 0x1178 <__floatsisf+0x12>
    116a:	90 95       	com	r25
    116c:	80 95       	com	r24
    116e:	70 95       	com	r23
    1170:	61 95       	neg	r22
    1172:	7f 4f       	sbci	r23, 0xFF	; 255
    1174:	8f 4f       	sbci	r24, 0xFF	; 255
    1176:	9f 4f       	sbci	r25, 0xFF	; 255
    1178:	99 23       	and	r25, r25
    117a:	a9 f0       	breq	.+42     	; 0x11a6 <__floatsisf+0x40>
    117c:	f9 2f       	mov	r31, r25
    117e:	96 e9       	ldi	r25, 0x96	; 150
    1180:	bb 27       	eor	r27, r27
    1182:	93 95       	inc	r25
    1184:	f6 95       	lsr	r31
    1186:	87 95       	ror	r24
    1188:	77 95       	ror	r23
    118a:	67 95       	ror	r22
    118c:	b7 95       	ror	r27
    118e:	f1 11       	cpse	r31, r1
    1190:	f8 cf       	rjmp	.-16     	; 0x1182 <__floatsisf+0x1c>
    1192:	fa f4       	brpl	.+62     	; 0x11d2 <__floatsisf+0x6c>
    1194:	bb 0f       	add	r27, r27
    1196:	11 f4       	brne	.+4      	; 0x119c <__floatsisf+0x36>
    1198:	60 ff       	sbrs	r22, 0
    119a:	1b c0       	rjmp	.+54     	; 0x11d2 <__floatsisf+0x6c>
    119c:	6f 5f       	subi	r22, 0xFF	; 255
    119e:	7f 4f       	sbci	r23, 0xFF	; 255
    11a0:	8f 4f       	sbci	r24, 0xFF	; 255
    11a2:	9f 4f       	sbci	r25, 0xFF	; 255
    11a4:	16 c0       	rjmp	.+44     	; 0x11d2 <__floatsisf+0x6c>
    11a6:	88 23       	and	r24, r24
    11a8:	11 f0       	breq	.+4      	; 0x11ae <__floatsisf+0x48>
    11aa:	96 e9       	ldi	r25, 0x96	; 150
    11ac:	11 c0       	rjmp	.+34     	; 0x11d0 <__floatsisf+0x6a>
    11ae:	77 23       	and	r23, r23
    11b0:	21 f0       	breq	.+8      	; 0x11ba <__floatsisf+0x54>
    11b2:	9e e8       	ldi	r25, 0x8E	; 142
    11b4:	87 2f       	mov	r24, r23
    11b6:	76 2f       	mov	r23, r22
    11b8:	05 c0       	rjmp	.+10     	; 0x11c4 <__floatsisf+0x5e>
    11ba:	66 23       	and	r22, r22
    11bc:	71 f0       	breq	.+28     	; 0x11da <__floatsisf+0x74>
    11be:	96 e8       	ldi	r25, 0x86	; 134
    11c0:	86 2f       	mov	r24, r22
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	60 e0       	ldi	r22, 0x00	; 0
    11c6:	2a f0       	brmi	.+10     	; 0x11d2 <__floatsisf+0x6c>
    11c8:	9a 95       	dec	r25
    11ca:	66 0f       	add	r22, r22
    11cc:	77 1f       	adc	r23, r23
    11ce:	88 1f       	adc	r24, r24
    11d0:	da f7       	brpl	.-10     	; 0x11c8 <__floatsisf+0x62>
    11d2:	88 0f       	add	r24, r24
    11d4:	96 95       	lsr	r25
    11d6:	87 95       	ror	r24
    11d8:	97 f9       	bld	r25, 7
    11da:	08 95       	ret

000011dc <__fp_inf>:
    11dc:	97 f9       	bld	r25, 7
    11de:	9f 67       	ori	r25, 0x7F	; 127
    11e0:	80 e8       	ldi	r24, 0x80	; 128
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	60 e0       	ldi	r22, 0x00	; 0
    11e6:	08 95       	ret

000011e8 <__fp_nan>:
    11e8:	9f ef       	ldi	r25, 0xFF	; 255
    11ea:	80 ec       	ldi	r24, 0xC0	; 192
    11ec:	08 95       	ret

000011ee <__fp_pscA>:
    11ee:	00 24       	eor	r0, r0
    11f0:	0a 94       	dec	r0
    11f2:	16 16       	cp	r1, r22
    11f4:	17 06       	cpc	r1, r23
    11f6:	18 06       	cpc	r1, r24
    11f8:	09 06       	cpc	r0, r25
    11fa:	08 95       	ret

000011fc <__fp_pscB>:
    11fc:	00 24       	eor	r0, r0
    11fe:	0a 94       	dec	r0
    1200:	12 16       	cp	r1, r18
    1202:	13 06       	cpc	r1, r19
    1204:	14 06       	cpc	r1, r20
    1206:	05 06       	cpc	r0, r21
    1208:	08 95       	ret

0000120a <__fp_round>:
    120a:	09 2e       	mov	r0, r25
    120c:	03 94       	inc	r0
    120e:	00 0c       	add	r0, r0
    1210:	11 f4       	brne	.+4      	; 0x1216 <__fp_round+0xc>
    1212:	88 23       	and	r24, r24
    1214:	52 f0       	brmi	.+20     	; 0x122a <__fp_round+0x20>
    1216:	bb 0f       	add	r27, r27
    1218:	40 f4       	brcc	.+16     	; 0x122a <__fp_round+0x20>
    121a:	bf 2b       	or	r27, r31
    121c:	11 f4       	brne	.+4      	; 0x1222 <__fp_round+0x18>
    121e:	60 ff       	sbrs	r22, 0
    1220:	04 c0       	rjmp	.+8      	; 0x122a <__fp_round+0x20>
    1222:	6f 5f       	subi	r22, 0xFF	; 255
    1224:	7f 4f       	sbci	r23, 0xFF	; 255
    1226:	8f 4f       	sbci	r24, 0xFF	; 255
    1228:	9f 4f       	sbci	r25, 0xFF	; 255
    122a:	08 95       	ret

0000122c <__fp_split3>:
    122c:	57 fd       	sbrc	r21, 7
    122e:	90 58       	subi	r25, 0x80	; 128
    1230:	44 0f       	add	r20, r20
    1232:	55 1f       	adc	r21, r21
    1234:	59 f0       	breq	.+22     	; 0x124c <__fp_splitA+0x10>
    1236:	5f 3f       	cpi	r21, 0xFF	; 255
    1238:	71 f0       	breq	.+28     	; 0x1256 <__fp_splitA+0x1a>
    123a:	47 95       	ror	r20

0000123c <__fp_splitA>:
    123c:	88 0f       	add	r24, r24
    123e:	97 fb       	bst	r25, 7
    1240:	99 1f       	adc	r25, r25
    1242:	61 f0       	breq	.+24     	; 0x125c <__fp_splitA+0x20>
    1244:	9f 3f       	cpi	r25, 0xFF	; 255
    1246:	79 f0       	breq	.+30     	; 0x1266 <__fp_splitA+0x2a>
    1248:	87 95       	ror	r24
    124a:	08 95       	ret
    124c:	12 16       	cp	r1, r18
    124e:	13 06       	cpc	r1, r19
    1250:	14 06       	cpc	r1, r20
    1252:	55 1f       	adc	r21, r21
    1254:	f2 cf       	rjmp	.-28     	; 0x123a <__fp_split3+0xe>
    1256:	46 95       	lsr	r20
    1258:	f1 df       	rcall	.-30     	; 0x123c <__fp_splitA>
    125a:	08 c0       	rjmp	.+16     	; 0x126c <__fp_splitA+0x30>
    125c:	16 16       	cp	r1, r22
    125e:	17 06       	cpc	r1, r23
    1260:	18 06       	cpc	r1, r24
    1262:	99 1f       	adc	r25, r25
    1264:	f1 cf       	rjmp	.-30     	; 0x1248 <__fp_splitA+0xc>
    1266:	86 95       	lsr	r24
    1268:	71 05       	cpc	r23, r1
    126a:	61 05       	cpc	r22, r1
    126c:	08 94       	sec
    126e:	08 95       	ret

00001270 <__fp_zero>:
    1270:	e8 94       	clt

00001272 <__fp_szero>:
    1272:	bb 27       	eor	r27, r27
    1274:	66 27       	eor	r22, r22
    1276:	77 27       	eor	r23, r23
    1278:	cb 01       	movw	r24, r22
    127a:	97 f9       	bld	r25, 7
    127c:	08 95       	ret

0000127e <__mulsf3>:
    127e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__mulsf3x>
    1282:	0c 94 05 09 	jmp	0x120a	; 0x120a <__fp_round>
    1286:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fp_pscA>
    128a:	38 f0       	brcs	.+14     	; 0x129a <__mulsf3+0x1c>
    128c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__fp_pscB>
    1290:	20 f0       	brcs	.+8      	; 0x129a <__mulsf3+0x1c>
    1292:	95 23       	and	r25, r21
    1294:	11 f0       	breq	.+4      	; 0x129a <__mulsf3+0x1c>
    1296:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__fp_inf>
    129a:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__fp_nan>
    129e:	11 24       	eor	r1, r1
    12a0:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__fp_szero>

000012a4 <__mulsf3x>:
    12a4:	0e 94 16 09 	call	0x122c	; 0x122c <__fp_split3>
    12a8:	70 f3       	brcs	.-36     	; 0x1286 <__mulsf3+0x8>

000012aa <__mulsf3_pse>:
    12aa:	95 9f       	mul	r25, r21
    12ac:	c1 f3       	breq	.-16     	; 0x129e <__mulsf3+0x20>
    12ae:	95 0f       	add	r25, r21
    12b0:	50 e0       	ldi	r21, 0x00	; 0
    12b2:	55 1f       	adc	r21, r21
    12b4:	62 9f       	mul	r22, r18
    12b6:	f0 01       	movw	r30, r0
    12b8:	72 9f       	mul	r23, r18
    12ba:	bb 27       	eor	r27, r27
    12bc:	f0 0d       	add	r31, r0
    12be:	b1 1d       	adc	r27, r1
    12c0:	63 9f       	mul	r22, r19
    12c2:	aa 27       	eor	r26, r26
    12c4:	f0 0d       	add	r31, r0
    12c6:	b1 1d       	adc	r27, r1
    12c8:	aa 1f       	adc	r26, r26
    12ca:	64 9f       	mul	r22, r20
    12cc:	66 27       	eor	r22, r22
    12ce:	b0 0d       	add	r27, r0
    12d0:	a1 1d       	adc	r26, r1
    12d2:	66 1f       	adc	r22, r22
    12d4:	82 9f       	mul	r24, r18
    12d6:	22 27       	eor	r18, r18
    12d8:	b0 0d       	add	r27, r0
    12da:	a1 1d       	adc	r26, r1
    12dc:	62 1f       	adc	r22, r18
    12de:	73 9f       	mul	r23, r19
    12e0:	b0 0d       	add	r27, r0
    12e2:	a1 1d       	adc	r26, r1
    12e4:	62 1f       	adc	r22, r18
    12e6:	83 9f       	mul	r24, r19
    12e8:	a0 0d       	add	r26, r0
    12ea:	61 1d       	adc	r22, r1
    12ec:	22 1f       	adc	r18, r18
    12ee:	74 9f       	mul	r23, r20
    12f0:	33 27       	eor	r19, r19
    12f2:	a0 0d       	add	r26, r0
    12f4:	61 1d       	adc	r22, r1
    12f6:	23 1f       	adc	r18, r19
    12f8:	84 9f       	mul	r24, r20
    12fa:	60 0d       	add	r22, r0
    12fc:	21 1d       	adc	r18, r1
    12fe:	82 2f       	mov	r24, r18
    1300:	76 2f       	mov	r23, r22
    1302:	6a 2f       	mov	r22, r26
    1304:	11 24       	eor	r1, r1
    1306:	9f 57       	subi	r25, 0x7F	; 127
    1308:	50 40       	sbci	r21, 0x00	; 0
    130a:	9a f0       	brmi	.+38     	; 0x1332 <__mulsf3_pse+0x88>
    130c:	f1 f0       	breq	.+60     	; 0x134a <__mulsf3_pse+0xa0>
    130e:	88 23       	and	r24, r24
    1310:	4a f0       	brmi	.+18     	; 0x1324 <__mulsf3_pse+0x7a>
    1312:	ee 0f       	add	r30, r30
    1314:	ff 1f       	adc	r31, r31
    1316:	bb 1f       	adc	r27, r27
    1318:	66 1f       	adc	r22, r22
    131a:	77 1f       	adc	r23, r23
    131c:	88 1f       	adc	r24, r24
    131e:	91 50       	subi	r25, 0x01	; 1
    1320:	50 40       	sbci	r21, 0x00	; 0
    1322:	a9 f7       	brne	.-22     	; 0x130e <__mulsf3_pse+0x64>
    1324:	9e 3f       	cpi	r25, 0xFE	; 254
    1326:	51 05       	cpc	r21, r1
    1328:	80 f0       	brcs	.+32     	; 0x134a <__mulsf3_pse+0xa0>
    132a:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__fp_inf>
    132e:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__fp_szero>
    1332:	5f 3f       	cpi	r21, 0xFF	; 255
    1334:	e4 f3       	brlt	.-8      	; 0x132e <__mulsf3_pse+0x84>
    1336:	98 3e       	cpi	r25, 0xE8	; 232
    1338:	d4 f3       	brlt	.-12     	; 0x132e <__mulsf3_pse+0x84>
    133a:	86 95       	lsr	r24
    133c:	77 95       	ror	r23
    133e:	67 95       	ror	r22
    1340:	b7 95       	ror	r27
    1342:	f7 95       	ror	r31
    1344:	e7 95       	ror	r30
    1346:	9f 5f       	subi	r25, 0xFF	; 255
    1348:	c1 f7       	brne	.-16     	; 0x133a <__mulsf3_pse+0x90>
    134a:	fe 2b       	or	r31, r30
    134c:	88 0f       	add	r24, r24
    134e:	91 1d       	adc	r25, r1
    1350:	96 95       	lsr	r25
    1352:	87 95       	ror	r24
    1354:	97 f9       	bld	r25, 7
    1356:	08 95       	ret

00001358 <pow>:
    1358:	fa 01       	movw	r30, r20
    135a:	ee 0f       	add	r30, r30
    135c:	ff 1f       	adc	r31, r31
    135e:	30 96       	adiw	r30, 0x00	; 0
    1360:	21 05       	cpc	r18, r1
    1362:	31 05       	cpc	r19, r1
    1364:	a1 f1       	breq	.+104    	; 0x13ce <pow+0x76>
    1366:	61 15       	cp	r22, r1
    1368:	71 05       	cpc	r23, r1
    136a:	61 f4       	brne	.+24     	; 0x1384 <pow+0x2c>
    136c:	80 38       	cpi	r24, 0x80	; 128
    136e:	bf e3       	ldi	r27, 0x3F	; 63
    1370:	9b 07       	cpc	r25, r27
    1372:	49 f1       	breq	.+82     	; 0x13c6 <pow+0x6e>
    1374:	68 94       	set
    1376:	90 38       	cpi	r25, 0x80	; 128
    1378:	81 05       	cpc	r24, r1
    137a:	61 f0       	breq	.+24     	; 0x1394 <pow+0x3c>
    137c:	80 38       	cpi	r24, 0x80	; 128
    137e:	bf ef       	ldi	r27, 0xFF	; 255
    1380:	9b 07       	cpc	r25, r27
    1382:	41 f0       	breq	.+16     	; 0x1394 <pow+0x3c>
    1384:	99 23       	and	r25, r25
    1386:	4a f5       	brpl	.+82     	; 0x13da <pow+0x82>
    1388:	ff 3f       	cpi	r31, 0xFF	; 255
    138a:	e1 05       	cpc	r30, r1
    138c:	31 05       	cpc	r19, r1
    138e:	21 05       	cpc	r18, r1
    1390:	19 f1       	breq	.+70     	; 0x13d8 <pow+0x80>
    1392:	e8 94       	clt
    1394:	08 94       	sec
    1396:	e7 95       	ror	r30
    1398:	d9 01       	movw	r26, r18
    139a:	aa 23       	and	r26, r26
    139c:	29 f4       	brne	.+10     	; 0x13a8 <pow+0x50>
    139e:	ab 2f       	mov	r26, r27
    13a0:	be 2f       	mov	r27, r30
    13a2:	f8 5f       	subi	r31, 0xF8	; 248
    13a4:	d0 f3       	brcs	.-12     	; 0x139a <pow+0x42>
    13a6:	10 c0       	rjmp	.+32     	; 0x13c8 <pow+0x70>
    13a8:	ff 5f       	subi	r31, 0xFF	; 255
    13aa:	70 f4       	brcc	.+28     	; 0x13c8 <pow+0x70>
    13ac:	a6 95       	lsr	r26
    13ae:	e0 f7       	brcc	.-8      	; 0x13a8 <pow+0x50>
    13b0:	f7 39       	cpi	r31, 0x97	; 151
    13b2:	50 f0       	brcs	.+20     	; 0x13c8 <pow+0x70>
    13b4:	19 f0       	breq	.+6      	; 0x13bc <pow+0x64>
    13b6:	ff 3a       	cpi	r31, 0xAF	; 175
    13b8:	38 f4       	brcc	.+14     	; 0x13c8 <pow+0x70>
    13ba:	9f 77       	andi	r25, 0x7F	; 127
    13bc:	9f 93       	push	r25
    13be:	0d d0       	rcall	.+26     	; 0x13da <pow+0x82>
    13c0:	0f 90       	pop	r0
    13c2:	07 fc       	sbrc	r0, 7
    13c4:	90 58       	subi	r25, 0x80	; 128
    13c6:	08 95       	ret
    13c8:	46 f0       	brts	.+16     	; 0x13da <pow+0x82>
    13ca:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__fp_nan>
    13ce:	60 e0       	ldi	r22, 0x00	; 0
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	80 e8       	ldi	r24, 0x80	; 128
    13d4:	9f e3       	ldi	r25, 0x3F	; 63
    13d6:	08 95       	ret
    13d8:	4f e7       	ldi	r20, 0x7F	; 127
    13da:	9f 77       	andi	r25, 0x7F	; 127
    13dc:	5f 93       	push	r21
    13de:	4f 93       	push	r20
    13e0:	3f 93       	push	r19
    13e2:	2f 93       	push	r18
    13e4:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <log>
    13e8:	2f 91       	pop	r18
    13ea:	3f 91       	pop	r19
    13ec:	4f 91       	pop	r20
    13ee:	5f 91       	pop	r21
    13f0:	0e 94 3f 09 	call	0x127e	; 0x127e <__mulsf3>
    13f4:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <exp>

000013f8 <round>:
    13f8:	0e 94 1e 09 	call	0x123c	; 0x123c <__fp_splitA>
    13fc:	e8 f0       	brcs	.+58     	; 0x1438 <round+0x40>
    13fe:	9e 37       	cpi	r25, 0x7E	; 126
    1400:	e8 f0       	brcs	.+58     	; 0x143c <round+0x44>
    1402:	96 39       	cpi	r25, 0x96	; 150
    1404:	b8 f4       	brcc	.+46     	; 0x1434 <round+0x3c>
    1406:	9e 38       	cpi	r25, 0x8E	; 142
    1408:	48 f4       	brcc	.+18     	; 0x141c <round+0x24>
    140a:	67 2f       	mov	r22, r23
    140c:	78 2f       	mov	r23, r24
    140e:	88 27       	eor	r24, r24
    1410:	98 5f       	subi	r25, 0xF8	; 248
    1412:	f9 cf       	rjmp	.-14     	; 0x1406 <round+0xe>
    1414:	86 95       	lsr	r24
    1416:	77 95       	ror	r23
    1418:	67 95       	ror	r22
    141a:	93 95       	inc	r25
    141c:	95 39       	cpi	r25, 0x95	; 149
    141e:	d0 f3       	brcs	.-12     	; 0x1414 <round+0x1c>
    1420:	b6 2f       	mov	r27, r22
    1422:	b1 70       	andi	r27, 0x01	; 1
    1424:	6b 0f       	add	r22, r27
    1426:	71 1d       	adc	r23, r1
    1428:	81 1d       	adc	r24, r1
    142a:	20 f4       	brcc	.+8      	; 0x1434 <round+0x3c>
    142c:	87 95       	ror	r24
    142e:	77 95       	ror	r23
    1430:	67 95       	ror	r22
    1432:	93 95       	inc	r25
    1434:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <__fp_mintl>
    1438:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__fp_mpack>
    143c:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__fp_szero>
    1440:	29 f4       	brne	.+10     	; 0x144c <round+0x54>
    1442:	16 f0       	brts	.+4      	; 0x1448 <round+0x50>
    1444:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__fp_inf>
    1448:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__fp_zero>
    144c:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__fp_nan>

00001450 <exp>:
    1450:	0e 94 1e 09 	call	0x123c	; 0x123c <__fp_splitA>
    1454:	a8 f3       	brcs	.-22     	; 0x1440 <round+0x48>
    1456:	96 38       	cpi	r25, 0x86	; 134
    1458:	a0 f7       	brcc	.-24     	; 0x1442 <round+0x4a>
    145a:	07 f8       	bld	r0, 7
    145c:	0f 92       	push	r0
    145e:	e8 94       	clt
    1460:	2b e3       	ldi	r18, 0x3B	; 59
    1462:	3a ea       	ldi	r19, 0xAA	; 170
    1464:	48 eb       	ldi	r20, 0xB8	; 184
    1466:	5f e7       	ldi	r21, 0x7F	; 127
    1468:	0e 94 55 09 	call	0x12aa	; 0x12aa <__mulsf3_pse>
    146c:	0f 92       	push	r0
    146e:	0f 92       	push	r0
    1470:	0f 92       	push	r0
    1472:	4d b7       	in	r20, 0x3d	; 61
    1474:	5e b7       	in	r21, 0x3e	; 62
    1476:	0f 92       	push	r0
    1478:	0e 94 3c 0b 	call	0x1678	; 0x1678 <modf>
    147c:	e4 e5       	ldi	r30, 0x54	; 84
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	0e 94 83 0a 	call	0x1506	; 0x1506 <__fp_powser>
    1484:	4f 91       	pop	r20
    1486:	5f 91       	pop	r21
    1488:	ef 91       	pop	r30
    148a:	ff 91       	pop	r31
    148c:	e5 95       	asr	r30
    148e:	ee 1f       	adc	r30, r30
    1490:	ff 1f       	adc	r31, r31
    1492:	49 f0       	breq	.+18     	; 0x14a6 <exp+0x56>
    1494:	fe 57       	subi	r31, 0x7E	; 126
    1496:	e0 68       	ori	r30, 0x80	; 128
    1498:	44 27       	eor	r20, r20
    149a:	ee 0f       	add	r30, r30
    149c:	44 1f       	adc	r20, r20
    149e:	fa 95       	dec	r31
    14a0:	e1 f7       	brne	.-8      	; 0x149a <exp+0x4a>
    14a2:	41 95       	neg	r20
    14a4:	55 0b       	sbc	r21, r21
    14a6:	0e 94 b6 0a 	call	0x156c	; 0x156c <ldexp>
    14aa:	0f 90       	pop	r0
    14ac:	07 fe       	sbrs	r0, 7
    14ae:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <inverse>
    14b2:	08 95       	ret

000014b4 <__fp_mintl>:
    14b4:	88 23       	and	r24, r24
    14b6:	71 f4       	brne	.+28     	; 0x14d4 <__fp_mintl+0x20>
    14b8:	77 23       	and	r23, r23
    14ba:	21 f0       	breq	.+8      	; 0x14c4 <__fp_mintl+0x10>
    14bc:	98 50       	subi	r25, 0x08	; 8
    14be:	87 2b       	or	r24, r23
    14c0:	76 2f       	mov	r23, r22
    14c2:	07 c0       	rjmp	.+14     	; 0x14d2 <__fp_mintl+0x1e>
    14c4:	66 23       	and	r22, r22
    14c6:	11 f4       	brne	.+4      	; 0x14cc <__fp_mintl+0x18>
    14c8:	99 27       	eor	r25, r25
    14ca:	0d c0       	rjmp	.+26     	; 0x14e6 <__fp_mintl+0x32>
    14cc:	90 51       	subi	r25, 0x10	; 16
    14ce:	86 2b       	or	r24, r22
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	2a f0       	brmi	.+10     	; 0x14e0 <__fp_mintl+0x2c>
    14d6:	9a 95       	dec	r25
    14d8:	66 0f       	add	r22, r22
    14da:	77 1f       	adc	r23, r23
    14dc:	88 1f       	adc	r24, r24
    14de:	da f7       	brpl	.-10     	; 0x14d6 <__fp_mintl+0x22>
    14e0:	88 0f       	add	r24, r24
    14e2:	96 95       	lsr	r25
    14e4:	87 95       	ror	r24
    14e6:	97 f9       	bld	r25, 7
    14e8:	08 95       	ret

000014ea <__fp_mpack>:
    14ea:	9f 3f       	cpi	r25, 0xFF	; 255
    14ec:	31 f0       	breq	.+12     	; 0x14fa <__fp_mpack_finite+0xc>

000014ee <__fp_mpack_finite>:
    14ee:	91 50       	subi	r25, 0x01	; 1
    14f0:	20 f4       	brcc	.+8      	; 0x14fa <__fp_mpack_finite+0xc>
    14f2:	87 95       	ror	r24
    14f4:	77 95       	ror	r23
    14f6:	67 95       	ror	r22
    14f8:	b7 95       	ror	r27
    14fa:	88 0f       	add	r24, r24
    14fc:	91 1d       	adc	r25, r1
    14fe:	96 95       	lsr	r25
    1500:	87 95       	ror	r24
    1502:	97 f9       	bld	r25, 7
    1504:	08 95       	ret

00001506 <__fp_powser>:
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	1f 93       	push	r17
    150c:	0f 93       	push	r16
    150e:	ff 92       	push	r15
    1510:	ef 92       	push	r14
    1512:	df 92       	push	r13
    1514:	7b 01       	movw	r14, r22
    1516:	8c 01       	movw	r16, r24
    1518:	68 94       	set
    151a:	06 c0       	rjmp	.+12     	; 0x1528 <__fp_powser+0x22>
    151c:	da 2e       	mov	r13, r26
    151e:	ef 01       	movw	r28, r30
    1520:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__mulsf3x>
    1524:	fe 01       	movw	r30, r28
    1526:	e8 94       	clt
    1528:	a5 91       	lpm	r26, Z+
    152a:	25 91       	lpm	r18, Z+
    152c:	35 91       	lpm	r19, Z+
    152e:	45 91       	lpm	r20, Z+
    1530:	55 91       	lpm	r21, Z+
    1532:	a6 f3       	brts	.-24     	; 0x151c <__fp_powser+0x16>
    1534:	ef 01       	movw	r28, r30
    1536:	0e 94 b4 07 	call	0xf68	; 0xf68 <__addsf3x>
    153a:	fe 01       	movw	r30, r28
    153c:	97 01       	movw	r18, r14
    153e:	a8 01       	movw	r20, r16
    1540:	da 94       	dec	r13
    1542:	69 f7       	brne	.-38     	; 0x151e <__fp_powser+0x18>
    1544:	df 90       	pop	r13
    1546:	ef 90       	pop	r14
    1548:	ff 90       	pop	r15
    154a:	0f 91       	pop	r16
    154c:	1f 91       	pop	r17
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <inverse>:
    1554:	9b 01       	movw	r18, r22
    1556:	ac 01       	movw	r20, r24
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	80 e8       	ldi	r24, 0x80	; 128
    155e:	9f e3       	ldi	r25, 0x3F	; 63
    1560:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__divsf3>
    1564:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__fp_inf>
    1568:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__fp_mpack>

0000156c <ldexp>:
    156c:	0e 94 1e 09 	call	0x123c	; 0x123c <__fp_splitA>
    1570:	d8 f3       	brcs	.-10     	; 0x1568 <inverse+0x14>
    1572:	99 23       	and	r25, r25
    1574:	c9 f3       	breq	.-14     	; 0x1568 <inverse+0x14>
    1576:	94 0f       	add	r25, r20
    1578:	51 1d       	adc	r21, r1
    157a:	a3 f3       	brvs	.-24     	; 0x1564 <inverse+0x10>
    157c:	91 50       	subi	r25, 0x01	; 1
    157e:	50 40       	sbci	r21, 0x00	; 0
    1580:	94 f0       	brlt	.+36     	; 0x15a6 <ldexp+0x3a>
    1582:	59 f0       	breq	.+22     	; 0x159a <ldexp+0x2e>
    1584:	88 23       	and	r24, r24
    1586:	32 f0       	brmi	.+12     	; 0x1594 <ldexp+0x28>
    1588:	66 0f       	add	r22, r22
    158a:	77 1f       	adc	r23, r23
    158c:	88 1f       	adc	r24, r24
    158e:	91 50       	subi	r25, 0x01	; 1
    1590:	50 40       	sbci	r21, 0x00	; 0
    1592:	c1 f7       	brne	.-16     	; 0x1584 <ldexp+0x18>
    1594:	9e 3f       	cpi	r25, 0xFE	; 254
    1596:	51 05       	cpc	r21, r1
    1598:	2c f7       	brge	.-54     	; 0x1564 <inverse+0x10>
    159a:	88 0f       	add	r24, r24
    159c:	91 1d       	adc	r25, r1
    159e:	96 95       	lsr	r25
    15a0:	87 95       	ror	r24
    15a2:	97 f9       	bld	r25, 7
    15a4:	08 95       	ret
    15a6:	5f 3f       	cpi	r21, 0xFF	; 255
    15a8:	ac f0       	brlt	.+42     	; 0x15d4 <ldexp+0x68>
    15aa:	98 3e       	cpi	r25, 0xE8	; 232
    15ac:	9c f0       	brlt	.+38     	; 0x15d4 <ldexp+0x68>
    15ae:	bb 27       	eor	r27, r27
    15b0:	86 95       	lsr	r24
    15b2:	77 95       	ror	r23
    15b4:	67 95       	ror	r22
    15b6:	b7 95       	ror	r27
    15b8:	08 f4       	brcc	.+2      	; 0x15bc <ldexp+0x50>
    15ba:	b1 60       	ori	r27, 0x01	; 1
    15bc:	93 95       	inc	r25
    15be:	c1 f7       	brne	.-16     	; 0x15b0 <ldexp+0x44>
    15c0:	bb 0f       	add	r27, r27
    15c2:	58 f7       	brcc	.-42     	; 0x159a <ldexp+0x2e>
    15c4:	11 f4       	brne	.+4      	; 0x15ca <ldexp+0x5e>
    15c6:	60 ff       	sbrs	r22, 0
    15c8:	e8 cf       	rjmp	.-48     	; 0x159a <ldexp+0x2e>
    15ca:	6f 5f       	subi	r22, 0xFF	; 255
    15cc:	7f 4f       	sbci	r23, 0xFF	; 255
    15ce:	8f 4f       	sbci	r24, 0xFF	; 255
    15d0:	9f 4f       	sbci	r25, 0xFF	; 255
    15d2:	e3 cf       	rjmp	.-58     	; 0x159a <ldexp+0x2e>
    15d4:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__fp_szero>
    15d8:	16 f0       	brts	.+4      	; 0x15de <ldexp+0x72>
    15da:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__fp_mpack>
    15de:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__fp_nan>
    15e2:	68 94       	set
    15e4:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__fp_inf>

000015e8 <log>:
    15e8:	0e 94 1e 09 	call	0x123c	; 0x123c <__fp_splitA>
    15ec:	a8 f3       	brcs	.-22     	; 0x15d8 <ldexp+0x6c>
    15ee:	99 23       	and	r25, r25
    15f0:	c1 f3       	breq	.-16     	; 0x15e2 <ldexp+0x76>
    15f2:	ae f3       	brts	.-22     	; 0x15de <ldexp+0x72>
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	1f 93       	push	r17
    15fa:	0f 93       	push	r16
    15fc:	ff 92       	push	r15
    15fe:	c9 2f       	mov	r28, r25
    1600:	dd 27       	eor	r29, r29
    1602:	88 23       	and	r24, r24
    1604:	2a f0       	brmi	.+10     	; 0x1610 <log+0x28>
    1606:	21 97       	sbiw	r28, 0x01	; 1
    1608:	66 0f       	add	r22, r22
    160a:	77 1f       	adc	r23, r23
    160c:	88 1f       	adc	r24, r24
    160e:	da f7       	brpl	.-10     	; 0x1606 <log+0x1e>
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	40 e8       	ldi	r20, 0x80	; 128
    1616:	5f eb       	ldi	r21, 0xBF	; 191
    1618:	9f e3       	ldi	r25, 0x3F	; 63
    161a:	88 39       	cpi	r24, 0x98	; 152
    161c:	20 f0       	brcs	.+8      	; 0x1626 <log+0x3e>
    161e:	80 3e       	cpi	r24, 0xE0	; 224
    1620:	38 f0       	brcs	.+14     	; 0x1630 <log+0x48>
    1622:	21 96       	adiw	r28, 0x01	; 1
    1624:	8f 77       	andi	r24, 0x7F	; 127
    1626:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__addsf3>
    162a:	ec e7       	ldi	r30, 0x7C	; 124
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	04 c0       	rjmp	.+8      	; 0x1638 <log+0x50>
    1630:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__addsf3>
    1634:	e9 ea       	ldi	r30, 0xA9	; 169
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	0e 94 83 0a 	call	0x1506	; 0x1506 <__fp_powser>
    163c:	8b 01       	movw	r16, r22
    163e:	be 01       	movw	r22, r28
    1640:	ec 01       	movw	r28, r24
    1642:	fb 2e       	mov	r15, r27
    1644:	6f 57       	subi	r22, 0x7F	; 127
    1646:	71 09       	sbc	r23, r1
    1648:	75 95       	asr	r23
    164a:	77 1f       	adc	r23, r23
    164c:	88 0b       	sbc	r24, r24
    164e:	99 0b       	sbc	r25, r25
    1650:	0e 94 b3 08 	call	0x1166	; 0x1166 <__floatsisf>
    1654:	28 e1       	ldi	r18, 0x18	; 24
    1656:	32 e7       	ldi	r19, 0x72	; 114
    1658:	41 e3       	ldi	r20, 0x31	; 49
    165a:	5f e3       	ldi	r21, 0x3F	; 63
    165c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__mulsf3x>
    1660:	af 2d       	mov	r26, r15
    1662:	98 01       	movw	r18, r16
    1664:	ae 01       	movw	r20, r28
    1666:	ff 90       	pop	r15
    1668:	0f 91       	pop	r16
    166a:	1f 91       	pop	r17
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	0e 94 b4 07 	call	0xf68	; 0xf68 <__addsf3x>
    1674:	0c 94 05 09 	jmp	0x120a	; 0x120a <__fp_round>

00001678 <modf>:
    1678:	fa 01       	movw	r30, r20
    167a:	dc 01       	movw	r26, r24
    167c:	aa 0f       	add	r26, r26
    167e:	bb 1f       	adc	r27, r27
    1680:	9b 01       	movw	r18, r22
    1682:	ac 01       	movw	r20, r24
    1684:	bf 57       	subi	r27, 0x7F	; 127
    1686:	28 f4       	brcc	.+10     	; 0x1692 <modf+0x1a>
    1688:	22 27       	eor	r18, r18
    168a:	33 27       	eor	r19, r19
    168c:	44 27       	eor	r20, r20
    168e:	50 78       	andi	r21, 0x80	; 128
    1690:	20 c0       	rjmp	.+64     	; 0x16d2 <modf+0x5a>
    1692:	b7 51       	subi	r27, 0x17	; 23
    1694:	90 f4       	brcc	.+36     	; 0x16ba <modf+0x42>
    1696:	ab 2f       	mov	r26, r27
    1698:	00 24       	eor	r0, r0
    169a:	46 95       	lsr	r20
    169c:	37 95       	ror	r19
    169e:	27 95       	ror	r18
    16a0:	01 1c       	adc	r0, r1
    16a2:	a3 95       	inc	r26
    16a4:	d2 f3       	brmi	.-12     	; 0x169a <modf+0x22>
    16a6:	00 20       	and	r0, r0
    16a8:	71 f0       	breq	.+28     	; 0x16c6 <modf+0x4e>
    16aa:	22 0f       	add	r18, r18
    16ac:	33 1f       	adc	r19, r19
    16ae:	44 1f       	adc	r20, r20
    16b0:	b3 95       	inc	r27
    16b2:	da f3       	brmi	.-10     	; 0x16aa <modf+0x32>
    16b4:	0e d0       	rcall	.+28     	; 0x16d2 <modf+0x5a>
    16b6:	0c 94 9c 07 	jmp	0xf38	; 0xf38 <__subsf3>
    16ba:	61 30       	cpi	r22, 0x01	; 1
    16bc:	71 05       	cpc	r23, r1
    16be:	a0 e8       	ldi	r26, 0x80	; 128
    16c0:	8a 07       	cpc	r24, r26
    16c2:	b9 46       	sbci	r27, 0x69	; 105
    16c4:	30 f4       	brcc	.+12     	; 0x16d2 <modf+0x5a>
    16c6:	9b 01       	movw	r18, r22
    16c8:	ac 01       	movw	r20, r24
    16ca:	66 27       	eor	r22, r22
    16cc:	77 27       	eor	r23, r23
    16ce:	88 27       	eor	r24, r24
    16d0:	90 78       	andi	r25, 0x80	; 128
    16d2:	30 96       	adiw	r30, 0x00	; 0
    16d4:	21 f0       	breq	.+8      	; 0x16de <modf+0x66>
    16d6:	20 83       	st	Z, r18
    16d8:	31 83       	std	Z+1, r19	; 0x01
    16da:	42 83       	std	Z+2, r20	; 0x02
    16dc:	53 83       	std	Z+3, r21	; 0x03
    16de:	08 95       	ret

000016e0 <__divmodhi4>:
    16e0:	97 fb       	bst	r25, 7
    16e2:	07 2e       	mov	r0, r23
    16e4:	16 f4       	brtc	.+4      	; 0x16ea <__divmodhi4+0xa>
    16e6:	00 94       	com	r0
    16e8:	07 d0       	rcall	.+14     	; 0x16f8 <__divmodhi4_neg1>
    16ea:	77 fd       	sbrc	r23, 7
    16ec:	09 d0       	rcall	.+18     	; 0x1700 <__divmodhi4_neg2>
    16ee:	0e 94 84 0b 	call	0x1708	; 0x1708 <__udivmodhi4>
    16f2:	07 fc       	sbrc	r0, 7
    16f4:	05 d0       	rcall	.+10     	; 0x1700 <__divmodhi4_neg2>
    16f6:	3e f4       	brtc	.+14     	; 0x1706 <__divmodhi4_exit>

000016f8 <__divmodhi4_neg1>:
    16f8:	90 95       	com	r25
    16fa:	81 95       	neg	r24
    16fc:	9f 4f       	sbci	r25, 0xFF	; 255
    16fe:	08 95       	ret

00001700 <__divmodhi4_neg2>:
    1700:	70 95       	com	r23
    1702:	61 95       	neg	r22
    1704:	7f 4f       	sbci	r23, 0xFF	; 255

00001706 <__divmodhi4_exit>:
    1706:	08 95       	ret

00001708 <__udivmodhi4>:
    1708:	aa 1b       	sub	r26, r26
    170a:	bb 1b       	sub	r27, r27
    170c:	51 e1       	ldi	r21, 0x11	; 17
    170e:	07 c0       	rjmp	.+14     	; 0x171e <__udivmodhi4_ep>

00001710 <__udivmodhi4_loop>:
    1710:	aa 1f       	adc	r26, r26
    1712:	bb 1f       	adc	r27, r27
    1714:	a6 17       	cp	r26, r22
    1716:	b7 07       	cpc	r27, r23
    1718:	10 f0       	brcs	.+4      	; 0x171e <__udivmodhi4_ep>
    171a:	a6 1b       	sub	r26, r22
    171c:	b7 0b       	sbc	r27, r23

0000171e <__udivmodhi4_ep>:
    171e:	88 1f       	adc	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	5a 95       	dec	r21
    1724:	a9 f7       	brne	.-22     	; 0x1710 <__udivmodhi4_loop>
    1726:	80 95       	com	r24
    1728:	90 95       	com	r25
    172a:	bc 01       	movw	r22, r24
    172c:	cd 01       	movw	r24, r26
    172e:	08 95       	ret

00001730 <sprintf>:
    1730:	ae e0       	ldi	r26, 0x0E	; 14
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	ee e9       	ldi	r30, 0x9E	; 158
    1736:	fb e0       	ldi	r31, 0x0B	; 11
    1738:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__prologue_saves__+0x1c>
    173c:	0d 89       	ldd	r16, Y+21	; 0x15
    173e:	1e 89       	ldd	r17, Y+22	; 0x16
    1740:	86 e0       	ldi	r24, 0x06	; 6
    1742:	8c 83       	std	Y+4, r24	; 0x04
    1744:	1a 83       	std	Y+2, r17	; 0x02
    1746:	09 83       	std	Y+1, r16	; 0x01
    1748:	8f ef       	ldi	r24, 0xFF	; 255
    174a:	9f e7       	ldi	r25, 0x7F	; 127
    174c:	9e 83       	std	Y+6, r25	; 0x06
    174e:	8d 83       	std	Y+5, r24	; 0x05
    1750:	ae 01       	movw	r20, r28
    1752:	47 5e       	subi	r20, 0xE7	; 231
    1754:	5f 4f       	sbci	r21, 0xFF	; 255
    1756:	6f 89       	ldd	r22, Y+23	; 0x17
    1758:	78 8d       	ldd	r23, Y+24	; 0x18
    175a:	ce 01       	movw	r24, r28
    175c:	01 96       	adiw	r24, 0x01	; 1
    175e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <vfprintf>
    1762:	ef 81       	ldd	r30, Y+7	; 0x07
    1764:	f8 85       	ldd	r31, Y+8	; 0x08
    1766:	e0 0f       	add	r30, r16
    1768:	f1 1f       	adc	r31, r17
    176a:	10 82       	st	Z, r1
    176c:	2e 96       	adiw	r28, 0x0e	; 14
    176e:	e4 e0       	ldi	r30, 0x04	; 4
    1770:	0c 94 75 0e 	jmp	0x1cea	; 0x1cea <__epilogue_restores__+0x1c>

00001774 <vfprintf>:
    1774:	ab e0       	ldi	r26, 0x0B	; 11
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e0 ec       	ldi	r30, 0xC0	; 192
    177a:	fb e0       	ldi	r31, 0x0B	; 11
    177c:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__prologue_saves__>
    1780:	6c 01       	movw	r12, r24
    1782:	7b 01       	movw	r14, r22
    1784:	8a 01       	movw	r16, r20
    1786:	fc 01       	movw	r30, r24
    1788:	17 82       	std	Z+7, r1	; 0x07
    178a:	16 82       	std	Z+6, r1	; 0x06
    178c:	83 81       	ldd	r24, Z+3	; 0x03
    178e:	81 ff       	sbrs	r24, 1
    1790:	cc c1       	rjmp	.+920    	; 0x1b2a <vfprintf+0x3b6>
    1792:	ce 01       	movw	r24, r28
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	3c 01       	movw	r6, r24
    1798:	f6 01       	movw	r30, r12
    179a:	93 81       	ldd	r25, Z+3	; 0x03
    179c:	f7 01       	movw	r30, r14
    179e:	93 fd       	sbrc	r25, 3
    17a0:	85 91       	lpm	r24, Z+
    17a2:	93 ff       	sbrs	r25, 3
    17a4:	81 91       	ld	r24, Z+
    17a6:	7f 01       	movw	r14, r30
    17a8:	88 23       	and	r24, r24
    17aa:	09 f4       	brne	.+2      	; 0x17ae <vfprintf+0x3a>
    17ac:	ba c1       	rjmp	.+884    	; 0x1b22 <vfprintf+0x3ae>
    17ae:	85 32       	cpi	r24, 0x25	; 37
    17b0:	39 f4       	brne	.+14     	; 0x17c0 <vfprintf+0x4c>
    17b2:	93 fd       	sbrc	r25, 3
    17b4:	85 91       	lpm	r24, Z+
    17b6:	93 ff       	sbrs	r25, 3
    17b8:	81 91       	ld	r24, Z+
    17ba:	7f 01       	movw	r14, r30
    17bc:	85 32       	cpi	r24, 0x25	; 37
    17be:	29 f4       	brne	.+10     	; 0x17ca <vfprintf+0x56>
    17c0:	b6 01       	movw	r22, r12
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <fputc>
    17c8:	e7 cf       	rjmp	.-50     	; 0x1798 <vfprintf+0x24>
    17ca:	91 2c       	mov	r9, r1
    17cc:	21 2c       	mov	r2, r1
    17ce:	31 2c       	mov	r3, r1
    17d0:	ff e1       	ldi	r31, 0x1F	; 31
    17d2:	f3 15       	cp	r31, r3
    17d4:	d8 f0       	brcs	.+54     	; 0x180c <vfprintf+0x98>
    17d6:	8b 32       	cpi	r24, 0x2B	; 43
    17d8:	79 f0       	breq	.+30     	; 0x17f8 <vfprintf+0x84>
    17da:	38 f4       	brcc	.+14     	; 0x17ea <vfprintf+0x76>
    17dc:	80 32       	cpi	r24, 0x20	; 32
    17de:	79 f0       	breq	.+30     	; 0x17fe <vfprintf+0x8a>
    17e0:	83 32       	cpi	r24, 0x23	; 35
    17e2:	a1 f4       	brne	.+40     	; 0x180c <vfprintf+0x98>
    17e4:	23 2d       	mov	r18, r3
    17e6:	20 61       	ori	r18, 0x10	; 16
    17e8:	1d c0       	rjmp	.+58     	; 0x1824 <vfprintf+0xb0>
    17ea:	8d 32       	cpi	r24, 0x2D	; 45
    17ec:	61 f0       	breq	.+24     	; 0x1806 <vfprintf+0x92>
    17ee:	80 33       	cpi	r24, 0x30	; 48
    17f0:	69 f4       	brne	.+26     	; 0x180c <vfprintf+0x98>
    17f2:	23 2d       	mov	r18, r3
    17f4:	21 60       	ori	r18, 0x01	; 1
    17f6:	16 c0       	rjmp	.+44     	; 0x1824 <vfprintf+0xb0>
    17f8:	83 2d       	mov	r24, r3
    17fa:	82 60       	ori	r24, 0x02	; 2
    17fc:	38 2e       	mov	r3, r24
    17fe:	e3 2d       	mov	r30, r3
    1800:	e4 60       	ori	r30, 0x04	; 4
    1802:	3e 2e       	mov	r3, r30
    1804:	2a c0       	rjmp	.+84     	; 0x185a <vfprintf+0xe6>
    1806:	f3 2d       	mov	r31, r3
    1808:	f8 60       	ori	r31, 0x08	; 8
    180a:	1d c0       	rjmp	.+58     	; 0x1846 <vfprintf+0xd2>
    180c:	37 fc       	sbrc	r3, 7
    180e:	2d c0       	rjmp	.+90     	; 0x186a <vfprintf+0xf6>
    1810:	20 ed       	ldi	r18, 0xD0	; 208
    1812:	28 0f       	add	r18, r24
    1814:	2a 30       	cpi	r18, 0x0A	; 10
    1816:	40 f0       	brcs	.+16     	; 0x1828 <vfprintf+0xb4>
    1818:	8e 32       	cpi	r24, 0x2E	; 46
    181a:	b9 f4       	brne	.+46     	; 0x184a <vfprintf+0xd6>
    181c:	36 fc       	sbrc	r3, 6
    181e:	81 c1       	rjmp	.+770    	; 0x1b22 <vfprintf+0x3ae>
    1820:	23 2d       	mov	r18, r3
    1822:	20 64       	ori	r18, 0x40	; 64
    1824:	32 2e       	mov	r3, r18
    1826:	19 c0       	rjmp	.+50     	; 0x185a <vfprintf+0xe6>
    1828:	36 fe       	sbrs	r3, 6
    182a:	06 c0       	rjmp	.+12     	; 0x1838 <vfprintf+0xc4>
    182c:	8a e0       	ldi	r24, 0x0A	; 10
    182e:	98 9e       	mul	r9, r24
    1830:	20 0d       	add	r18, r0
    1832:	11 24       	eor	r1, r1
    1834:	92 2e       	mov	r9, r18
    1836:	11 c0       	rjmp	.+34     	; 0x185a <vfprintf+0xe6>
    1838:	ea e0       	ldi	r30, 0x0A	; 10
    183a:	2e 9e       	mul	r2, r30
    183c:	20 0d       	add	r18, r0
    183e:	11 24       	eor	r1, r1
    1840:	22 2e       	mov	r2, r18
    1842:	f3 2d       	mov	r31, r3
    1844:	f0 62       	ori	r31, 0x20	; 32
    1846:	3f 2e       	mov	r3, r31
    1848:	08 c0       	rjmp	.+16     	; 0x185a <vfprintf+0xe6>
    184a:	8c 36       	cpi	r24, 0x6C	; 108
    184c:	21 f4       	brne	.+8      	; 0x1856 <vfprintf+0xe2>
    184e:	83 2d       	mov	r24, r3
    1850:	80 68       	ori	r24, 0x80	; 128
    1852:	38 2e       	mov	r3, r24
    1854:	02 c0       	rjmp	.+4      	; 0x185a <vfprintf+0xe6>
    1856:	88 36       	cpi	r24, 0x68	; 104
    1858:	41 f4       	brne	.+16     	; 0x186a <vfprintf+0xf6>
    185a:	f7 01       	movw	r30, r14
    185c:	93 fd       	sbrc	r25, 3
    185e:	85 91       	lpm	r24, Z+
    1860:	93 ff       	sbrs	r25, 3
    1862:	81 91       	ld	r24, Z+
    1864:	7f 01       	movw	r14, r30
    1866:	81 11       	cpse	r24, r1
    1868:	b3 cf       	rjmp	.-154    	; 0x17d0 <vfprintf+0x5c>
    186a:	98 2f       	mov	r25, r24
    186c:	9f 7d       	andi	r25, 0xDF	; 223
    186e:	95 54       	subi	r25, 0x45	; 69
    1870:	93 30       	cpi	r25, 0x03	; 3
    1872:	28 f4       	brcc	.+10     	; 0x187e <vfprintf+0x10a>
    1874:	0c 5f       	subi	r16, 0xFC	; 252
    1876:	1f 4f       	sbci	r17, 0xFF	; 255
    1878:	9f e3       	ldi	r25, 0x3F	; 63
    187a:	99 83       	std	Y+1, r25	; 0x01
    187c:	0d c0       	rjmp	.+26     	; 0x1898 <vfprintf+0x124>
    187e:	83 36       	cpi	r24, 0x63	; 99
    1880:	31 f0       	breq	.+12     	; 0x188e <vfprintf+0x11a>
    1882:	83 37       	cpi	r24, 0x73	; 115
    1884:	71 f0       	breq	.+28     	; 0x18a2 <vfprintf+0x12e>
    1886:	83 35       	cpi	r24, 0x53	; 83
    1888:	09 f0       	breq	.+2      	; 0x188c <vfprintf+0x118>
    188a:	59 c0       	rjmp	.+178    	; 0x193e <vfprintf+0x1ca>
    188c:	21 c0       	rjmp	.+66     	; 0x18d0 <vfprintf+0x15c>
    188e:	f8 01       	movw	r30, r16
    1890:	80 81       	ld	r24, Z
    1892:	89 83       	std	Y+1, r24	; 0x01
    1894:	0e 5f       	subi	r16, 0xFE	; 254
    1896:	1f 4f       	sbci	r17, 0xFF	; 255
    1898:	88 24       	eor	r8, r8
    189a:	83 94       	inc	r8
    189c:	91 2c       	mov	r9, r1
    189e:	53 01       	movw	r10, r6
    18a0:	13 c0       	rjmp	.+38     	; 0x18c8 <vfprintf+0x154>
    18a2:	28 01       	movw	r4, r16
    18a4:	f2 e0       	ldi	r31, 0x02	; 2
    18a6:	4f 0e       	add	r4, r31
    18a8:	51 1c       	adc	r5, r1
    18aa:	f8 01       	movw	r30, r16
    18ac:	a0 80       	ld	r10, Z
    18ae:	b1 80       	ldd	r11, Z+1	; 0x01
    18b0:	36 fe       	sbrs	r3, 6
    18b2:	03 c0       	rjmp	.+6      	; 0x18ba <vfprintf+0x146>
    18b4:	69 2d       	mov	r22, r9
    18b6:	70 e0       	ldi	r23, 0x00	; 0
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <vfprintf+0x14a>
    18ba:	6f ef       	ldi	r22, 0xFF	; 255
    18bc:	7f ef       	ldi	r23, 0xFF	; 255
    18be:	c5 01       	movw	r24, r10
    18c0:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <strnlen>
    18c4:	4c 01       	movw	r8, r24
    18c6:	82 01       	movw	r16, r4
    18c8:	f3 2d       	mov	r31, r3
    18ca:	ff 77       	andi	r31, 0x7F	; 127
    18cc:	3f 2e       	mov	r3, r31
    18ce:	16 c0       	rjmp	.+44     	; 0x18fc <vfprintf+0x188>
    18d0:	28 01       	movw	r4, r16
    18d2:	22 e0       	ldi	r18, 0x02	; 2
    18d4:	42 0e       	add	r4, r18
    18d6:	51 1c       	adc	r5, r1
    18d8:	f8 01       	movw	r30, r16
    18da:	a0 80       	ld	r10, Z
    18dc:	b1 80       	ldd	r11, Z+1	; 0x01
    18de:	36 fe       	sbrs	r3, 6
    18e0:	03 c0       	rjmp	.+6      	; 0x18e8 <vfprintf+0x174>
    18e2:	69 2d       	mov	r22, r9
    18e4:	70 e0       	ldi	r23, 0x00	; 0
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <vfprintf+0x178>
    18e8:	6f ef       	ldi	r22, 0xFF	; 255
    18ea:	7f ef       	ldi	r23, 0xFF	; 255
    18ec:	c5 01       	movw	r24, r10
    18ee:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <strnlen_P>
    18f2:	4c 01       	movw	r8, r24
    18f4:	f3 2d       	mov	r31, r3
    18f6:	f0 68       	ori	r31, 0x80	; 128
    18f8:	3f 2e       	mov	r3, r31
    18fa:	82 01       	movw	r16, r4
    18fc:	33 fc       	sbrc	r3, 3
    18fe:	1b c0       	rjmp	.+54     	; 0x1936 <vfprintf+0x1c2>
    1900:	82 2d       	mov	r24, r2
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	88 16       	cp	r8, r24
    1906:	99 06       	cpc	r9, r25
    1908:	b0 f4       	brcc	.+44     	; 0x1936 <vfprintf+0x1c2>
    190a:	b6 01       	movw	r22, r12
    190c:	80 e2       	ldi	r24, 0x20	; 32
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <fputc>
    1914:	2a 94       	dec	r2
    1916:	f4 cf       	rjmp	.-24     	; 0x1900 <vfprintf+0x18c>
    1918:	f5 01       	movw	r30, r10
    191a:	37 fc       	sbrc	r3, 7
    191c:	85 91       	lpm	r24, Z+
    191e:	37 fe       	sbrs	r3, 7
    1920:	81 91       	ld	r24, Z+
    1922:	5f 01       	movw	r10, r30
    1924:	b6 01       	movw	r22, r12
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <fputc>
    192c:	21 10       	cpse	r2, r1
    192e:	2a 94       	dec	r2
    1930:	21 e0       	ldi	r18, 0x01	; 1
    1932:	82 1a       	sub	r8, r18
    1934:	91 08       	sbc	r9, r1
    1936:	81 14       	cp	r8, r1
    1938:	91 04       	cpc	r9, r1
    193a:	71 f7       	brne	.-36     	; 0x1918 <vfprintf+0x1a4>
    193c:	e8 c0       	rjmp	.+464    	; 0x1b0e <vfprintf+0x39a>
    193e:	84 36       	cpi	r24, 0x64	; 100
    1940:	11 f0       	breq	.+4      	; 0x1946 <vfprintf+0x1d2>
    1942:	89 36       	cpi	r24, 0x69	; 105
    1944:	41 f5       	brne	.+80     	; 0x1996 <vfprintf+0x222>
    1946:	f8 01       	movw	r30, r16
    1948:	37 fe       	sbrs	r3, 7
    194a:	07 c0       	rjmp	.+14     	; 0x195a <vfprintf+0x1e6>
    194c:	60 81       	ld	r22, Z
    194e:	71 81       	ldd	r23, Z+1	; 0x01
    1950:	82 81       	ldd	r24, Z+2	; 0x02
    1952:	93 81       	ldd	r25, Z+3	; 0x03
    1954:	0c 5f       	subi	r16, 0xFC	; 252
    1956:	1f 4f       	sbci	r17, 0xFF	; 255
    1958:	08 c0       	rjmp	.+16     	; 0x196a <vfprintf+0x1f6>
    195a:	60 81       	ld	r22, Z
    195c:	71 81       	ldd	r23, Z+1	; 0x01
    195e:	07 2e       	mov	r0, r23
    1960:	00 0c       	add	r0, r0
    1962:	88 0b       	sbc	r24, r24
    1964:	99 0b       	sbc	r25, r25
    1966:	0e 5f       	subi	r16, 0xFE	; 254
    1968:	1f 4f       	sbci	r17, 0xFF	; 255
    196a:	f3 2d       	mov	r31, r3
    196c:	ff 76       	andi	r31, 0x6F	; 111
    196e:	3f 2e       	mov	r3, r31
    1970:	97 ff       	sbrs	r25, 7
    1972:	09 c0       	rjmp	.+18     	; 0x1986 <vfprintf+0x212>
    1974:	90 95       	com	r25
    1976:	80 95       	com	r24
    1978:	70 95       	com	r23
    197a:	61 95       	neg	r22
    197c:	7f 4f       	sbci	r23, 0xFF	; 255
    197e:	8f 4f       	sbci	r24, 0xFF	; 255
    1980:	9f 4f       	sbci	r25, 0xFF	; 255
    1982:	f0 68       	ori	r31, 0x80	; 128
    1984:	3f 2e       	mov	r3, r31
    1986:	2a e0       	ldi	r18, 0x0A	; 10
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	a3 01       	movw	r20, r6
    198c:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__ultoa_invert>
    1990:	88 2e       	mov	r8, r24
    1992:	86 18       	sub	r8, r6
    1994:	45 c0       	rjmp	.+138    	; 0x1a20 <vfprintf+0x2ac>
    1996:	85 37       	cpi	r24, 0x75	; 117
    1998:	31 f4       	brne	.+12     	; 0x19a6 <vfprintf+0x232>
    199a:	23 2d       	mov	r18, r3
    199c:	2f 7e       	andi	r18, 0xEF	; 239
    199e:	b2 2e       	mov	r11, r18
    19a0:	2a e0       	ldi	r18, 0x0A	; 10
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	25 c0       	rjmp	.+74     	; 0x19f0 <vfprintf+0x27c>
    19a6:	93 2d       	mov	r25, r3
    19a8:	99 7f       	andi	r25, 0xF9	; 249
    19aa:	b9 2e       	mov	r11, r25
    19ac:	8f 36       	cpi	r24, 0x6F	; 111
    19ae:	c1 f0       	breq	.+48     	; 0x19e0 <vfprintf+0x26c>
    19b0:	18 f4       	brcc	.+6      	; 0x19b8 <vfprintf+0x244>
    19b2:	88 35       	cpi	r24, 0x58	; 88
    19b4:	79 f0       	breq	.+30     	; 0x19d4 <vfprintf+0x260>
    19b6:	b5 c0       	rjmp	.+362    	; 0x1b22 <vfprintf+0x3ae>
    19b8:	80 37       	cpi	r24, 0x70	; 112
    19ba:	19 f0       	breq	.+6      	; 0x19c2 <vfprintf+0x24e>
    19bc:	88 37       	cpi	r24, 0x78	; 120
    19be:	21 f0       	breq	.+8      	; 0x19c8 <vfprintf+0x254>
    19c0:	b0 c0       	rjmp	.+352    	; 0x1b22 <vfprintf+0x3ae>
    19c2:	e9 2f       	mov	r30, r25
    19c4:	e0 61       	ori	r30, 0x10	; 16
    19c6:	be 2e       	mov	r11, r30
    19c8:	b4 fe       	sbrs	r11, 4
    19ca:	0d c0       	rjmp	.+26     	; 0x19e6 <vfprintf+0x272>
    19cc:	fb 2d       	mov	r31, r11
    19ce:	f4 60       	ori	r31, 0x04	; 4
    19d0:	bf 2e       	mov	r11, r31
    19d2:	09 c0       	rjmp	.+18     	; 0x19e6 <vfprintf+0x272>
    19d4:	34 fe       	sbrs	r3, 4
    19d6:	0a c0       	rjmp	.+20     	; 0x19ec <vfprintf+0x278>
    19d8:	29 2f       	mov	r18, r25
    19da:	26 60       	ori	r18, 0x06	; 6
    19dc:	b2 2e       	mov	r11, r18
    19de:	06 c0       	rjmp	.+12     	; 0x19ec <vfprintf+0x278>
    19e0:	28 e0       	ldi	r18, 0x08	; 8
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	05 c0       	rjmp	.+10     	; 0x19f0 <vfprintf+0x27c>
    19e6:	20 e1       	ldi	r18, 0x10	; 16
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <vfprintf+0x27c>
    19ec:	20 e1       	ldi	r18, 0x10	; 16
    19ee:	32 e0       	ldi	r19, 0x02	; 2
    19f0:	f8 01       	movw	r30, r16
    19f2:	b7 fe       	sbrs	r11, 7
    19f4:	07 c0       	rjmp	.+14     	; 0x1a04 <vfprintf+0x290>
    19f6:	60 81       	ld	r22, Z
    19f8:	71 81       	ldd	r23, Z+1	; 0x01
    19fa:	82 81       	ldd	r24, Z+2	; 0x02
    19fc:	93 81       	ldd	r25, Z+3	; 0x03
    19fe:	0c 5f       	subi	r16, 0xFC	; 252
    1a00:	1f 4f       	sbci	r17, 0xFF	; 255
    1a02:	06 c0       	rjmp	.+12     	; 0x1a10 <vfprintf+0x29c>
    1a04:	60 81       	ld	r22, Z
    1a06:	71 81       	ldd	r23, Z+1	; 0x01
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	0e 5f       	subi	r16, 0xFE	; 254
    1a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a10:	a3 01       	movw	r20, r6
    1a12:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__ultoa_invert>
    1a16:	88 2e       	mov	r8, r24
    1a18:	86 18       	sub	r8, r6
    1a1a:	fb 2d       	mov	r31, r11
    1a1c:	ff 77       	andi	r31, 0x7F	; 127
    1a1e:	3f 2e       	mov	r3, r31
    1a20:	36 fe       	sbrs	r3, 6
    1a22:	0d c0       	rjmp	.+26     	; 0x1a3e <vfprintf+0x2ca>
    1a24:	23 2d       	mov	r18, r3
    1a26:	2e 7f       	andi	r18, 0xFE	; 254
    1a28:	a2 2e       	mov	r10, r18
    1a2a:	89 14       	cp	r8, r9
    1a2c:	58 f4       	brcc	.+22     	; 0x1a44 <vfprintf+0x2d0>
    1a2e:	34 fe       	sbrs	r3, 4
    1a30:	0b c0       	rjmp	.+22     	; 0x1a48 <vfprintf+0x2d4>
    1a32:	32 fc       	sbrc	r3, 2
    1a34:	09 c0       	rjmp	.+18     	; 0x1a48 <vfprintf+0x2d4>
    1a36:	83 2d       	mov	r24, r3
    1a38:	8e 7e       	andi	r24, 0xEE	; 238
    1a3a:	a8 2e       	mov	r10, r24
    1a3c:	05 c0       	rjmp	.+10     	; 0x1a48 <vfprintf+0x2d4>
    1a3e:	b8 2c       	mov	r11, r8
    1a40:	a3 2c       	mov	r10, r3
    1a42:	03 c0       	rjmp	.+6      	; 0x1a4a <vfprintf+0x2d6>
    1a44:	b8 2c       	mov	r11, r8
    1a46:	01 c0       	rjmp	.+2      	; 0x1a4a <vfprintf+0x2d6>
    1a48:	b9 2c       	mov	r11, r9
    1a4a:	a4 fe       	sbrs	r10, 4
    1a4c:	0f c0       	rjmp	.+30     	; 0x1a6c <vfprintf+0x2f8>
    1a4e:	fe 01       	movw	r30, r28
    1a50:	e8 0d       	add	r30, r8
    1a52:	f1 1d       	adc	r31, r1
    1a54:	80 81       	ld	r24, Z
    1a56:	80 33       	cpi	r24, 0x30	; 48
    1a58:	21 f4       	brne	.+8      	; 0x1a62 <vfprintf+0x2ee>
    1a5a:	9a 2d       	mov	r25, r10
    1a5c:	99 7e       	andi	r25, 0xE9	; 233
    1a5e:	a9 2e       	mov	r10, r25
    1a60:	09 c0       	rjmp	.+18     	; 0x1a74 <vfprintf+0x300>
    1a62:	a2 fe       	sbrs	r10, 2
    1a64:	06 c0       	rjmp	.+12     	; 0x1a72 <vfprintf+0x2fe>
    1a66:	b3 94       	inc	r11
    1a68:	b3 94       	inc	r11
    1a6a:	04 c0       	rjmp	.+8      	; 0x1a74 <vfprintf+0x300>
    1a6c:	8a 2d       	mov	r24, r10
    1a6e:	86 78       	andi	r24, 0x86	; 134
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <vfprintf+0x300>
    1a72:	b3 94       	inc	r11
    1a74:	a3 fc       	sbrc	r10, 3
    1a76:	11 c0       	rjmp	.+34     	; 0x1a9a <vfprintf+0x326>
    1a78:	a0 fe       	sbrs	r10, 0
    1a7a:	06 c0       	rjmp	.+12     	; 0x1a88 <vfprintf+0x314>
    1a7c:	b2 14       	cp	r11, r2
    1a7e:	88 f4       	brcc	.+34     	; 0x1aa2 <vfprintf+0x32e>
    1a80:	28 0c       	add	r2, r8
    1a82:	92 2c       	mov	r9, r2
    1a84:	9b 18       	sub	r9, r11
    1a86:	0e c0       	rjmp	.+28     	; 0x1aa4 <vfprintf+0x330>
    1a88:	b2 14       	cp	r11, r2
    1a8a:	60 f4       	brcc	.+24     	; 0x1aa4 <vfprintf+0x330>
    1a8c:	b6 01       	movw	r22, r12
    1a8e:	80 e2       	ldi	r24, 0x20	; 32
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <fputc>
    1a96:	b3 94       	inc	r11
    1a98:	f7 cf       	rjmp	.-18     	; 0x1a88 <vfprintf+0x314>
    1a9a:	b2 14       	cp	r11, r2
    1a9c:	18 f4       	brcc	.+6      	; 0x1aa4 <vfprintf+0x330>
    1a9e:	2b 18       	sub	r2, r11
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <vfprintf+0x332>
    1aa2:	98 2c       	mov	r9, r8
    1aa4:	21 2c       	mov	r2, r1
    1aa6:	a4 fe       	sbrs	r10, 4
    1aa8:	10 c0       	rjmp	.+32     	; 0x1aca <vfprintf+0x356>
    1aaa:	b6 01       	movw	r22, r12
    1aac:	80 e3       	ldi	r24, 0x30	; 48
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <fputc>
    1ab4:	a2 fe       	sbrs	r10, 2
    1ab6:	17 c0       	rjmp	.+46     	; 0x1ae6 <vfprintf+0x372>
    1ab8:	a1 fc       	sbrc	r10, 1
    1aba:	03 c0       	rjmp	.+6      	; 0x1ac2 <vfprintf+0x34e>
    1abc:	88 e7       	ldi	r24, 0x78	; 120
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <vfprintf+0x352>
    1ac2:	88 e5       	ldi	r24, 0x58	; 88
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	b6 01       	movw	r22, r12
    1ac8:	0c c0       	rjmp	.+24     	; 0x1ae2 <vfprintf+0x36e>
    1aca:	8a 2d       	mov	r24, r10
    1acc:	86 78       	andi	r24, 0x86	; 134
    1ace:	59 f0       	breq	.+22     	; 0x1ae6 <vfprintf+0x372>
    1ad0:	a1 fe       	sbrs	r10, 1
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <vfprintf+0x364>
    1ad4:	8b e2       	ldi	r24, 0x2B	; 43
    1ad6:	01 c0       	rjmp	.+2      	; 0x1ada <vfprintf+0x366>
    1ad8:	80 e2       	ldi	r24, 0x20	; 32
    1ada:	a7 fc       	sbrc	r10, 7
    1adc:	8d e2       	ldi	r24, 0x2D	; 45
    1ade:	b6 01       	movw	r22, r12
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <fputc>
    1ae6:	89 14       	cp	r8, r9
    1ae8:	38 f4       	brcc	.+14     	; 0x1af8 <vfprintf+0x384>
    1aea:	b6 01       	movw	r22, r12
    1aec:	80 e3       	ldi	r24, 0x30	; 48
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <fputc>
    1af4:	9a 94       	dec	r9
    1af6:	f7 cf       	rjmp	.-18     	; 0x1ae6 <vfprintf+0x372>
    1af8:	8a 94       	dec	r8
    1afa:	f3 01       	movw	r30, r6
    1afc:	e8 0d       	add	r30, r8
    1afe:	f1 1d       	adc	r31, r1
    1b00:	80 81       	ld	r24, Z
    1b02:	b6 01       	movw	r22, r12
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <fputc>
    1b0a:	81 10       	cpse	r8, r1
    1b0c:	f5 cf       	rjmp	.-22     	; 0x1af8 <vfprintf+0x384>
    1b0e:	22 20       	and	r2, r2
    1b10:	09 f4       	brne	.+2      	; 0x1b14 <vfprintf+0x3a0>
    1b12:	42 ce       	rjmp	.-892    	; 0x1798 <vfprintf+0x24>
    1b14:	b6 01       	movw	r22, r12
    1b16:	80 e2       	ldi	r24, 0x20	; 32
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <fputc>
    1b1e:	2a 94       	dec	r2
    1b20:	f6 cf       	rjmp	.-20     	; 0x1b0e <vfprintf+0x39a>
    1b22:	f6 01       	movw	r30, r12
    1b24:	86 81       	ldd	r24, Z+6	; 0x06
    1b26:	97 81       	ldd	r25, Z+7	; 0x07
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <vfprintf+0x3ba>
    1b2a:	8f ef       	ldi	r24, 0xFF	; 255
    1b2c:	9f ef       	ldi	r25, 0xFF	; 255
    1b2e:	2b 96       	adiw	r28, 0x0b	; 11
    1b30:	e2 e1       	ldi	r30, 0x12	; 18
    1b32:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <__epilogue_restores__>

00001b36 <strnlen_P>:
    1b36:	fc 01       	movw	r30, r24
    1b38:	05 90       	lpm	r0, Z+
    1b3a:	61 50       	subi	r22, 0x01	; 1
    1b3c:	70 40       	sbci	r23, 0x00	; 0
    1b3e:	01 10       	cpse	r0, r1
    1b40:	d8 f7       	brcc	.-10     	; 0x1b38 <strnlen_P+0x2>
    1b42:	80 95       	com	r24
    1b44:	90 95       	com	r25
    1b46:	8e 0f       	add	r24, r30
    1b48:	9f 1f       	adc	r25, r31
    1b4a:	08 95       	ret

00001b4c <strnlen>:
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	61 50       	subi	r22, 0x01	; 1
    1b50:	70 40       	sbci	r23, 0x00	; 0
    1b52:	01 90       	ld	r0, Z+
    1b54:	01 10       	cpse	r0, r1
    1b56:	d8 f7       	brcc	.-10     	; 0x1b4e <strnlen+0x2>
    1b58:	80 95       	com	r24
    1b5a:	90 95       	com	r25
    1b5c:	8e 0f       	add	r24, r30
    1b5e:	9f 1f       	adc	r25, r31
    1b60:	08 95       	ret

00001b62 <fputc>:
    1b62:	0f 93       	push	r16
    1b64:	1f 93       	push	r17
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	fb 01       	movw	r30, r22
    1b6c:	23 81       	ldd	r18, Z+3	; 0x03
    1b6e:	21 fd       	sbrc	r18, 1
    1b70:	03 c0       	rjmp	.+6      	; 0x1b78 <fputc+0x16>
    1b72:	8f ef       	ldi	r24, 0xFF	; 255
    1b74:	9f ef       	ldi	r25, 0xFF	; 255
    1b76:	2c c0       	rjmp	.+88     	; 0x1bd0 <fputc+0x6e>
    1b78:	22 ff       	sbrs	r18, 2
    1b7a:	16 c0       	rjmp	.+44     	; 0x1ba8 <fputc+0x46>
    1b7c:	46 81       	ldd	r20, Z+6	; 0x06
    1b7e:	57 81       	ldd	r21, Z+7	; 0x07
    1b80:	24 81       	ldd	r18, Z+4	; 0x04
    1b82:	35 81       	ldd	r19, Z+5	; 0x05
    1b84:	42 17       	cp	r20, r18
    1b86:	53 07       	cpc	r21, r19
    1b88:	44 f4       	brge	.+16     	; 0x1b9a <fputc+0x38>
    1b8a:	a0 81       	ld	r26, Z
    1b8c:	b1 81       	ldd	r27, Z+1	; 0x01
    1b8e:	9d 01       	movw	r18, r26
    1b90:	2f 5f       	subi	r18, 0xFF	; 255
    1b92:	3f 4f       	sbci	r19, 0xFF	; 255
    1b94:	31 83       	std	Z+1, r19	; 0x01
    1b96:	20 83       	st	Z, r18
    1b98:	8c 93       	st	X, r24
    1b9a:	26 81       	ldd	r18, Z+6	; 0x06
    1b9c:	37 81       	ldd	r19, Z+7	; 0x07
    1b9e:	2f 5f       	subi	r18, 0xFF	; 255
    1ba0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba2:	37 83       	std	Z+7, r19	; 0x07
    1ba4:	26 83       	std	Z+6, r18	; 0x06
    1ba6:	14 c0       	rjmp	.+40     	; 0x1bd0 <fputc+0x6e>
    1ba8:	8b 01       	movw	r16, r22
    1baa:	ec 01       	movw	r28, r24
    1bac:	fb 01       	movw	r30, r22
    1bae:	00 84       	ldd	r0, Z+8	; 0x08
    1bb0:	f1 85       	ldd	r31, Z+9	; 0x09
    1bb2:	e0 2d       	mov	r30, r0
    1bb4:	09 95       	icall
    1bb6:	89 2b       	or	r24, r25
    1bb8:	e1 f6       	brne	.-72     	; 0x1b72 <fputc+0x10>
    1bba:	d8 01       	movw	r26, r16
    1bbc:	16 96       	adiw	r26, 0x06	; 6
    1bbe:	8d 91       	ld	r24, X+
    1bc0:	9c 91       	ld	r25, X
    1bc2:	17 97       	sbiw	r26, 0x07	; 7
    1bc4:	01 96       	adiw	r24, 0x01	; 1
    1bc6:	17 96       	adiw	r26, 0x07	; 7
    1bc8:	9c 93       	st	X, r25
    1bca:	8e 93       	st	-X, r24
    1bcc:	16 97       	sbiw	r26, 0x06	; 6
    1bce:	ce 01       	movw	r24, r28
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	1f 91       	pop	r17
    1bd6:	0f 91       	pop	r16
    1bd8:	08 95       	ret

00001bda <__ultoa_invert>:
    1bda:	fa 01       	movw	r30, r20
    1bdc:	aa 27       	eor	r26, r26
    1bde:	28 30       	cpi	r18, 0x08	; 8
    1be0:	51 f1       	breq	.+84     	; 0x1c36 <__ultoa_invert+0x5c>
    1be2:	20 31       	cpi	r18, 0x10	; 16
    1be4:	81 f1       	breq	.+96     	; 0x1c46 <__ultoa_invert+0x6c>
    1be6:	e8 94       	clt
    1be8:	6f 93       	push	r22
    1bea:	6e 7f       	andi	r22, 0xFE	; 254
    1bec:	6e 5f       	subi	r22, 0xFE	; 254
    1bee:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf0:	8f 4f       	sbci	r24, 0xFF	; 255
    1bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf4:	af 4f       	sbci	r26, 0xFF	; 255
    1bf6:	b1 e0       	ldi	r27, 0x01	; 1
    1bf8:	3e d0       	rcall	.+124    	; 0x1c76 <__ultoa_invert+0x9c>
    1bfa:	b4 e0       	ldi	r27, 0x04	; 4
    1bfc:	3c d0       	rcall	.+120    	; 0x1c76 <__ultoa_invert+0x9c>
    1bfe:	67 0f       	add	r22, r23
    1c00:	78 1f       	adc	r23, r24
    1c02:	89 1f       	adc	r24, r25
    1c04:	9a 1f       	adc	r25, r26
    1c06:	a1 1d       	adc	r26, r1
    1c08:	68 0f       	add	r22, r24
    1c0a:	79 1f       	adc	r23, r25
    1c0c:	8a 1f       	adc	r24, r26
    1c0e:	91 1d       	adc	r25, r1
    1c10:	a1 1d       	adc	r26, r1
    1c12:	6a 0f       	add	r22, r26
    1c14:	71 1d       	adc	r23, r1
    1c16:	81 1d       	adc	r24, r1
    1c18:	91 1d       	adc	r25, r1
    1c1a:	a1 1d       	adc	r26, r1
    1c1c:	20 d0       	rcall	.+64     	; 0x1c5e <__ultoa_invert+0x84>
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <__ultoa_invert+0x48>
    1c20:	68 94       	set
    1c22:	3f 91       	pop	r19
    1c24:	2a e0       	ldi	r18, 0x0A	; 10
    1c26:	26 9f       	mul	r18, r22
    1c28:	11 24       	eor	r1, r1
    1c2a:	30 19       	sub	r19, r0
    1c2c:	30 5d       	subi	r19, 0xD0	; 208
    1c2e:	31 93       	st	Z+, r19
    1c30:	de f6       	brtc	.-74     	; 0x1be8 <__ultoa_invert+0xe>
    1c32:	cf 01       	movw	r24, r30
    1c34:	08 95       	ret
    1c36:	46 2f       	mov	r20, r22
    1c38:	47 70       	andi	r20, 0x07	; 7
    1c3a:	40 5d       	subi	r20, 0xD0	; 208
    1c3c:	41 93       	st	Z+, r20
    1c3e:	b3 e0       	ldi	r27, 0x03	; 3
    1c40:	0f d0       	rcall	.+30     	; 0x1c60 <__ultoa_invert+0x86>
    1c42:	c9 f7       	brne	.-14     	; 0x1c36 <__ultoa_invert+0x5c>
    1c44:	f6 cf       	rjmp	.-20     	; 0x1c32 <__ultoa_invert+0x58>
    1c46:	46 2f       	mov	r20, r22
    1c48:	4f 70       	andi	r20, 0x0F	; 15
    1c4a:	40 5d       	subi	r20, 0xD0	; 208
    1c4c:	4a 33       	cpi	r20, 0x3A	; 58
    1c4e:	18 f0       	brcs	.+6      	; 0x1c56 <__ultoa_invert+0x7c>
    1c50:	49 5d       	subi	r20, 0xD9	; 217
    1c52:	31 fd       	sbrc	r19, 1
    1c54:	40 52       	subi	r20, 0x20	; 32
    1c56:	41 93       	st	Z+, r20
    1c58:	02 d0       	rcall	.+4      	; 0x1c5e <__ultoa_invert+0x84>
    1c5a:	a9 f7       	brne	.-22     	; 0x1c46 <__ultoa_invert+0x6c>
    1c5c:	ea cf       	rjmp	.-44     	; 0x1c32 <__ultoa_invert+0x58>
    1c5e:	b4 e0       	ldi	r27, 0x04	; 4
    1c60:	a6 95       	lsr	r26
    1c62:	97 95       	ror	r25
    1c64:	87 95       	ror	r24
    1c66:	77 95       	ror	r23
    1c68:	67 95       	ror	r22
    1c6a:	ba 95       	dec	r27
    1c6c:	c9 f7       	brne	.-14     	; 0x1c60 <__ultoa_invert+0x86>
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	61 05       	cpc	r22, r1
    1c72:	71 05       	cpc	r23, r1
    1c74:	08 95       	ret
    1c76:	9b 01       	movw	r18, r22
    1c78:	ac 01       	movw	r20, r24
    1c7a:	0a 2e       	mov	r0, r26
    1c7c:	06 94       	lsr	r0
    1c7e:	57 95       	ror	r21
    1c80:	47 95       	ror	r20
    1c82:	37 95       	ror	r19
    1c84:	27 95       	ror	r18
    1c86:	ba 95       	dec	r27
    1c88:	c9 f7       	brne	.-14     	; 0x1c7c <__ultoa_invert+0xa2>
    1c8a:	62 0f       	add	r22, r18
    1c8c:	73 1f       	adc	r23, r19
    1c8e:	84 1f       	adc	r24, r20
    1c90:	95 1f       	adc	r25, r21
    1c92:	a0 1d       	adc	r26, r0
    1c94:	08 95       	ret

00001c96 <__prologue_saves__>:
    1c96:	2f 92       	push	r2
    1c98:	3f 92       	push	r3
    1c9a:	4f 92       	push	r4
    1c9c:	5f 92       	push	r5
    1c9e:	6f 92       	push	r6
    1ca0:	7f 92       	push	r7
    1ca2:	8f 92       	push	r8
    1ca4:	9f 92       	push	r9
    1ca6:	af 92       	push	r10
    1ca8:	bf 92       	push	r11
    1caa:	cf 92       	push	r12
    1cac:	df 92       	push	r13
    1cae:	ef 92       	push	r14
    1cb0:	ff 92       	push	r15
    1cb2:	0f 93       	push	r16
    1cb4:	1f 93       	push	r17
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	ca 1b       	sub	r28, r26
    1cc0:	db 0b       	sbc	r29, r27
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	f8 94       	cli
    1cc6:	de bf       	out	0x3e, r29	; 62
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	cd bf       	out	0x3d, r28	; 61
    1ccc:	09 94       	ijmp

00001cce <__epilogue_restores__>:
    1cce:	2a 88       	ldd	r2, Y+18	; 0x12
    1cd0:	39 88       	ldd	r3, Y+17	; 0x11
    1cd2:	48 88       	ldd	r4, Y+16	; 0x10
    1cd4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1cd6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1cd8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1cda:	8c 84       	ldd	r8, Y+12	; 0x0c
    1cdc:	9b 84       	ldd	r9, Y+11	; 0x0b
    1cde:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ce0:	b9 84       	ldd	r11, Y+9	; 0x09
    1ce2:	c8 84       	ldd	r12, Y+8	; 0x08
    1ce4:	df 80       	ldd	r13, Y+7	; 0x07
    1ce6:	ee 80       	ldd	r14, Y+6	; 0x06
    1ce8:	fd 80       	ldd	r15, Y+5	; 0x05
    1cea:	0c 81       	ldd	r16, Y+4	; 0x04
    1cec:	1b 81       	ldd	r17, Y+3	; 0x03
    1cee:	aa 81       	ldd	r26, Y+2	; 0x02
    1cf0:	b9 81       	ldd	r27, Y+1	; 0x01
    1cf2:	ce 0f       	add	r28, r30
    1cf4:	d1 1d       	adc	r29, r1
    1cf6:	0f b6       	in	r0, 0x3f	; 63
    1cf8:	f8 94       	cli
    1cfa:	de bf       	out	0x3e, r29	; 62
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	cd bf       	out	0x3d, r28	; 61
    1d00:	ed 01       	movw	r28, r26
    1d02:	08 95       	ret

00001d04 <_exit>:
    1d04:	f8 94       	cli

00001d06 <__stop_program>:
    1d06:	ff cf       	rjmp	.-2      	; 0x1d06 <__stop_program>
